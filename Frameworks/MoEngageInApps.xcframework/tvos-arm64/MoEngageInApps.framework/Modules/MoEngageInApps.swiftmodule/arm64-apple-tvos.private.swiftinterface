// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-tvos13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MoEngageInApps
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import DeveloperToolsSupport
import Foundation
import MoEngageCampaignsCore
import MoEngageCore
@_exported import MoEngageInApps
import MoEngageMessaging
import MoEngageTriggerEvaluator
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension MoEngageInApps.MoEngageInAppType : Swift.Codable {
}
extension MoEngageInApps.MoEngageInAppTemplateType : Swift.Codable {
}
extension MoEngageInApps.MoEngageInAppSDKCampaignType : Swift.Codable {
}
extension MoEngageInApps.MoEngageNudgeDisplayPosition : Swift.Codable {
}
extension MoEngageInApps.MoEngageInAppOrientationType : Swift.Codable {
}
extension MoEngageInApps.MoEngageInAppCampaignSubType : Swift.Codable {
}
extension MoEngageInApps.MoEngageInAppFCMeta : Swift.Codable {
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension MoEngageInApps.MoEngageInAppDeliveryControl : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageInApps.MoEngageInAppDisplayRules : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageInApps.MoEngageInAppDisplay : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageInApps.MoEngageInAppState : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageInApps.MoEngageInAppCampaignMeta : MoEngageCore.MoEngageDataModel {
  public static var flushDuration: Dispatch.DispatchTimeInterval {
    get
  }
  required convenience public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension MoEngageInApps.MoEngageInAppCampaignsData : MoEngageCore.MoEngageDataModel {
  public static var flushDuration: Dispatch.DispatchTimeInterval {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageInApps.MoEngageInAppStatType : Swift.Codable {
}
extension MoEngageInApps.MoEngageInAppStatInstance : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageInApps.MoEngageInAppCampaignStat : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageInApps.MoEngageInAppBatchData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageInApps.MoEngageInAppStatData : MoEngageCore.MoEngageDataModel {
  public static var flushDuration: Dispatch.DispatchTimeInterval {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  required convenience public init(from decoder: any Swift.Decoder) throws
}
@objc public class MoEngageInAppAction : MoEngageInApps.MoEngageModelObject {
  @objc final public let actionType: MoEngageInApps.MoEngageInAppActionType
  @objc final public let keyValuePairs: [Swift.String : Any]
  @objc public init(actionType: MoEngageInApps.MoEngageInAppActionType, keyValuePairs: [Swift.String : Any])
  @objc deinit
}
@objc extension MoEngageInApps.MoEngageInAppActionHandler {
  @objc dynamic public func performNotificationPermissionAction(_ action: MoEngageInApps.MoEngageInAppWidgetAction)
}
@objc extension MoEngageInApps.MoEngageInAppAssetsManager {
  @objc dynamic public func getInAppVideoName(for url: Foundation.URL) -> Swift.String
  @objc dynamic public func getAssetsToBeDownloaded(resourceLinks: [Swift.String : Swift.String], withInAppType inAppType: MoEngageInApps.MoEngageInAppType, forCampaignID campaignID: Swift.String, forSDKInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> [Foundation.URL : Foundation.URL]?
  @objc dynamic public func move(resource: Foundation.URL, to newPath: Foundation.URL) throws
  @objc dynamic public func downloadVideoAssets(resourceLinks: [Swift.String : Swift.String], withInAppType inAppType: MoEngageInApps.MoEngageInAppType, forCampaignID campaignID: Swift.String, forSDKInstance sdkInstance: MoEngageCore.MoEngageSDKInstance, andCompletionBlock completionBlock: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func downloadAssetsData(forURL url: Foundation.URL, sdkInstance: MoEngageCore.MoEngageSDKInstance, withCompletionHandler completionBlock: @escaping (Swift.Bool, Foundation.Data?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers @objc public class MoEngageInAppCampaign : MoEngageInApps.MoEngageModelObject {
  @objc final public let campaignId: Swift.String
  @objc final public let campaignName: Swift.String
  @objc final public let expiryTime: Foundation.NSDate
  @objc final public let isDraft: Swift.Bool
  @objc final public let campaignContext: [Swift.String : Any]
  @objc public init(campaignId: Swift.String, campaignName: Swift.String, expiryTime: Foundation.NSDate, isDraft: Swift.Bool, campaignContext: [Swift.String : Any])
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageInAppCampaignSubTypeUtils : ObjectiveC.NSObject {
  @objc public static func getStrValue(forCampaignSubType campaignSubType: MoEngageInApps.MoEngageInAppCampaignSubType) -> Swift.String
  @objc public static func getCampaignSubType(forStrValue campaignSubType: Swift.String?) -> MoEngageInApps.MoEngageInAppCampaignSubType
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class MoEngageInAppConfigurationHandler : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageInApps.MoEngageInAppConfigurationHandler
  @objc(trackNudgeView:onController:sdkInstance:) final public func track(nudgeView: MoEngageInApps.MoEngageInAppPrimaryContainerView, onController controller: UIKit.UIViewController, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public protocol MoEngageInAppFocusDataSource {
  @objc weak var primaryFocusView: UIKit.UIView? { get set }
}
@objc public protocol MoEngageInAppViewDataSource {
  @objc weak var inAppPayload: MoEngageInApps.MoEngageInAppViewPayload? { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class MoEngageInAppTemplateAlignmentUtil : ObjectiveC.NSObject {
  @objc public static func getTemplateAlignment(fromStringValue strValue: Swift.String) -> MoEngageInApps.MoEngageInAppTemplateAlignment
  @objc public static func getStringValue(for alignment: MoEngageInApps.MoEngageInAppTemplateAlignment) -> Swift.String?
  @objc deinit
}
extension MoEngageInApps.MoEngageInAppPrimaryContainerView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var accessibilityViewIsModal: Swift.Bool {
    @objc get
    @objc set
  }
}
@objc extension MoEngageInApps.MoEngageInAppController {
  @objc dynamic public func syncInApps(inAppFetchType: MoEngageInApps.MoEngageInAppSyncType, previousIdentities: [Swift.String : Swift.String], withCompletionBlock completionBlock: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func getSelfHandledInAppPostSync()
  @objc dynamic public func getSelfHandledInAppsPostSync()
  @nonobjc public func fetchRequestBodyResult(inAppFetchType: MoEngageInApps.MoEngageInAppSyncType, previousIdentities: [Swift.String : Swift.String]) -> MoEngageCore.MoEngageRequestBodyBuildResult?
  @objc dynamic public func fetchRequestBodyResultForTemplateFetch() -> [Swift.String : Any]
  @nonobjc public func getInAppSyncRequest(requestBody: [Swift.String : Any]) -> MoEngageCore.MoEngageNetworkRequest?
  @objc dynamic public func getQueryStringParamsForInAppRequest() -> [Swift.String : Swift.String]
  @objc dynamic public func getQueryParamsForMultipleCampaignsInAppRequest() -> [Swift.String : Swift.String]
  @objc dynamic public func getQueryStringParamsForInAppSyncRequest() -> [Swift.String : Swift.String]
  @objc dynamic public func fetchInAppRequest(withCampaignMeta campaignMeta: MoEngageInApps.MoEngageInAppCampaignMeta, forPreview forPreviewFlow: Swift.Bool, withTriggerInfo triggerInfoDict: [Swift.AnyHashable : Any], withCompletionBlock completionBlock: @escaping (Swift.Bool, Swift.Int, [Swift.AnyHashable : Any]?) -> Swift.Void)
  @nonobjc public func getInAppFetchPayloadRequest(forCampaign campaignMeta: MoEngageInApps.MoEngageInAppCampaignMeta, withTriggerInfo triggerInfoDict: [Swift.AnyHashable : Any]) -> MoEngageCore.MoEngageNetworkRequest?
  @objc dynamic public func fetchInAppRequest(withCampaignID campaignID: Swift.String, withCompletionBlock completionBlock: @escaping (Swift.Bool, [Swift.AnyHashable : Any]?) -> Swift.Void)
  @objc dynamic public func getSelfHandledInApps(completionBlock: @escaping (MoEngageInApps.MoEngageInAppSelfHandledData?) -> Swift.Void)
  @objc dynamic public func fetchMultipleCampaignsInAppRequest(for campaigns: [MoEngageInApps.MoEngageInAppCampaignMeta], withCompletionBlock completion: @escaping (Swift.Bool, [Swift.AnyHashable : Any]?) -> Swift.Void)
  @objc dynamic public func createCampaignsRequestPayload(from campaigns: [MoEngageInApps.MoEngageInAppCampaignMeta]) -> [[Swift.String : Any]]
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MoEngageInAppControllerProviderInterface : ObjectiveC.NSObject {
  @objc public static var popUpInAppPresent: Swift.Bool
  @objc public static func getController(appId: Swift.String?, completion: @escaping (MoEngageInApps.MoEngageInAppController?) -> Swift.Void)
  @objc public static func getController(for sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageInApps.MoEngageInAppController
  @objc public static func removeController(for sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class MoEngageInAppControllerProvider : MoEngageCore.MoEngageControllerProvider {
  @objc public static func getController(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageInApps.MoEngageInAppController
  @objc public static func removeController(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Controller = MoEngageInApps.MoEngageInAppController
  @objc deinit
}
@objc public class MoEngageInAppCustomRatingWidget : MoEngageInApps.MoEngageInAppWidget {
  @objc public var ratingIconList: [Swift.String : MoEngageInApps.MoEngageInAppRatingIcon]
  @objc public var parsedAccessibilityData: [Swift.String : MoEngageCampaignsCore.MoEngageAccessibilityData]
  @objc public init(withPayloadDict payloadDict: [Swift.AnyHashable : Any], andRef: Swift.String, andSDKInstance: MoEngageCore.MoEngageSDKInstance) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageInAppDisplaySizeUtils : ObjectiveC.NSObject {
  @objc public static func getDisplaySize(from displaySizeStr: Swift.String) -> MoEngageInApps.MoEngageInAppDisplaySize
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageInAppMigration : ObjectiveC.NSObject {
  @objc public static func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol MoEngageInAppNativeDelegate : ObjectiveC.NSObjectProtocol {
  @objc func inAppShown(withCampaignInfo inappCampaign: MoEngageInApps.MoEngageInAppCampaign, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
  @objc func inAppClicked(withCampaignInfo inappCampaign: MoEngageInApps.MoEngageInAppCampaign, andNavigationActionInfo navigationAction: MoEngageInApps.MoEngageInAppNavigationAction, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
  @objc func inAppClicked(withCampaignInfo inappCampaign: MoEngageInApps.MoEngageInAppCampaign, andCustomActionInfo customAction: MoEngageInApps.MoEngageInAppAction, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
  @objc func inAppDismissed(withCampaignInfo inappCampaign: MoEngageInApps.MoEngageInAppCampaign, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
  @objc func selfHandledInAppTriggered(withInfo inappCampaign: MoEngageInApps.MoEngageInAppSelfHandledCampaign, forAccountMeta accountMeta: MoEngageCore.MoEngageAccountMeta)
}
@objc public enum MoEngageNavigationType : Swift.Int {
  case navigateToScreen
  case deepLink
  case richLanding
  case externalBrowser
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MoEngageInAppNavigationAction : MoEngageInApps.MoEngageInAppAction {
  @objc final public let navigationType: MoEngageInApps.MoEngageNavigationType
  @objc final public let navigationUrl: Swift.String?
  @objc public init(navigationType: MoEngageInApps.MoEngageNavigationType, actionType: MoEngageInApps.MoEngageInAppActionType, navigationUrl: Swift.String?, keyValuePairs: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MoEngageInAppRatingIcon : ObjectiveC.NSObject {
  @objc public var value: Foundation.NSNumber?
  @objc public var ratingDescription: Swift.String?
  @objc public var selectedState: MoEngageInApps.MoEngageInAppRatingIconState?
  @objc public var unselectedState: MoEngageInApps.MoEngageInAppRatingIconState?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MoEngageInAppRatingIconState : ObjectiveC.NSObject {
  @objc public var style: MoEngageInApps.MoEngageInAppWidgetStyle?
  @objc public var icon: Swift.String?
  @objc deinit
}
@objc public enum MoEngageInAppRatingType : Swift.Int {
  case star
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MoEngageInAppRatingTypeUtils : ObjectiveC.NSObject {
  @objc public static func getInAppRatingType(from ratingTypeStr: Swift.String) -> MoEngageInApps.MoEngageInAppRatingType
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MoEngageInAppResolution : ObjectiveC.NSObject {
  @objc final public let height: Swift.Float
  @objc final public let width: Swift.Float
  @objc public init?(withPayload payload: [Swift.AnyHashable : Any]?, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MoEngageInAppRules : ObjectiveC.NSObject {
  @available(*, deprecated, message: "Use screenNames instead.")
  @objc public var screenName: Swift.String?
  @objc public var contexts: [Swift.String]
  @objc public var screenNames: [Swift.String]
  @objc public init(screenNames: [Swift.String] = [], contexts: [Swift.String] = [])
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class MoEngageInAppScrollContentView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, parentContainer: MoEngageInApps.MoEngageInAppPrimaryContainerView?)
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func addWidget(_ widget: UIKit.UIView)
  @objc @_Concurrency.MainActor @preconcurrency public func updateContentSize()
  @objc @_Concurrency.MainActor @preconcurrency public func widgetSizeChanged(_ widget: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
}
@objc public enum MoEngageInAppEligibleCriteria : Swift.Int {
  case multipleContext
  case defaultValidation
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class MoEngageInAppSelfHandledCampaign : MoEngageInApps.MoEngageInAppCampaign {
  @objc final public let campaignContent: Swift.String
  @objc final public let autoDismissInterval: Swift.Int
  @objc public var displayRules: MoEngageInApps.MoEngageInAppRules
  @objc public init(campaignContent: Swift.String, autoDismissInterval: Swift.Int, campaign_id: Swift.String, campaign_name: Swift.String, expiry_time: Foundation.NSDate, isDraft: Swift.Bool, campaignContext: [Swift.String : Any], displayRules: MoEngageInApps.MoEngageInAppRules)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MoEngageInAppSelfHandledData : ObjectiveC.NSObject {
  @objc final public let accountMeta: MoEngageCore.MoEngageAccountMeta
  @objc public var campaigns: [MoEngageInApps.MoEngageInAppSelfHandledCampaign]
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc extension MoEngageInApps.MoEngageInAppStatsManager {
  @objc dynamic public func syncBatch(shouldSendJWT: Swift.Bool, batchData: MoEngageInApps.MoEngageInAppBatchData, WithCompletion completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func getQueryStringParamsForInAppRequest() -> [Swift.String : Swift.String]
}
@_inheritsConvenienceInitializers @objc public class MoEngageInAppStorageHandler : ObjectiveC.NSObject {
  @objc public func migrateInAppsData(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func saveNoNEncryptedInAppData(data: MoEngageInApps.MoEngageInAppCampaignsData, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func fetchInAppData(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageInApps.MoEngageInAppCampaignsData
  @objc public func saveInAppData(data: MoEngageInApps.MoEngageInAppCampaignsData, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func migrateInAppStatData(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func fetchInAppStatData(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageInApps.MoEngageInAppStatData
  @objc public func saveInAppStatData(data: MoEngageInApps.MoEngageInAppStatData, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc override dynamic public init()
  @objc deinit
}
extension MoEngageInApps.MoEngageInAppUtils {
  @objc public static func getStringRepresentation(for sdkCampaignType: MoEngageInApps.MoEngageInAppSDKCampaignType) -> Swift.String
  @objc public static func mapNavigationType(from type: MoEngageInApps.MoEngageNavActionType) -> MoEngageInApps.MoEngageNavigationType
  @objc public static func isAppEnabledForInstance(_ sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func isInAppEnabledForInstance(_ sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func isInAppStatsEnabledForInstance(_ sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class MoEngageInAppVideoWidget : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency final public let widget: MoEngageInApps.MoEngageInAppWidget
  @objc @_Concurrency.MainActor @preconcurrency public var endPosition: CoreFoundation.CGPoint {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency weak public var resizeDelegate: (any MoEngageInApps.MoEngageInAppWidgetResizingDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public init(withInAppWidget widget: MoEngageInApps.MoEngageInAppWidget, forTemplateType templateType: MoEngageInApps.MoEngageInAppTemplateType, inContainer viewContainer: UIKit.UIView, withStartPosition startPosition: CoreFoundation.CGPoint, andCampaignID campaignId: Swift.String, resizeDelegate: (any MoEngageInApps.MoEngageInAppWidgetResizingDelegate)? = nil) throws
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func removeFromSuperview()
}
extension MoEngageInApps.MoEngageInAppVideoWidget : MoEngageInApps.MoEngageInAppWidgetResizingCallbackListnerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func resized(to displaySize: MoEngageInApps.MoEngageInAppDisplaySize, in container: MoEngageInApps.MoEngageInAppContainer, xScale: CoreFoundation.CGFloat, yScale: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MoEngageInAppVideoWidgetUtils : ObjectiveC.NSObject {
  @objc public static let fullscreenImage: UIKit.UIImage?
  @objc public static let closeFullscreenImage: UIKit.UIImage?
  @objc public static let buttonSideLength: CoreFoundation.CGFloat
  @objc public static let buttonShowDuration: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MoEngageInAppViewVisibility : Swift.Int {
  case hidden
  case visible
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MoEngageInAppViewVisibilityUtils : ObjectiveC.NSObject {
  @objc public static func getViewVisibilityStatus(from visibilityStr: Swift.String) -> MoEngageInApps.MoEngageInAppViewVisibility
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MoEngageInAppWidgetFocusedStateStyle : ObjectiveC.NSObject {
  @objc final public let background: MoEngageInApps.MoEngageWidgetBackground?
  @objc final public let border: MoEngageInApps.MoEngageWidgetBorder?
  @objc required public init(withPayloadDict payload: [Swift.AnyHashable : Any], andSDKInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func create(for widgetType: MoEngageInApps.MoEngageInAppWidgetType, withPayloadDict payload: [Swift.AnyHashable : Any]?, andSDKInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) throws -> MoEngageInApps.MoEngageInAppWidgetFocusedStateStyle
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MoEngageInAppLabelWidgetFocusedStateStyle : MoEngageInApps.MoEngageInAppWidgetFocusedStateStyle {
  @objc final public let font: MoEngageInApps.MoEngageWidgetFont?
  @objc required public init(withPayloadDict payload: [Swift.AnyHashable : Any], andSDKInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MoEngageInAppButtonWidgetFocusedStateStyle : MoEngageInApps.MoEngageInAppLabelWidgetFocusedStateStyle {
  @objc final public let isPrimaryFocusItem: Swift.Bool
  @objc required public init(withPayloadDict payload: [Swift.AnyHashable : Any], andSDKInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public protocol MoEngageInAppWidgetResizingDelegate : ObjectiveC.NSObjectProtocol {
  @objc var originalWidth: CoreFoundation.CGFloat { get }
  @objc var currentDisplaySize: MoEngageInApps.MoEngageInAppDisplaySize { get }
  @objc(addListner:) func add(listner: any MoEngageInApps.MoEngageInAppWidgetResizingCallbackListnerDelegate)
  @objc func toggleFullscreen()
}
@objc public protocol MoEngageInAppWidgetResizingCallbackListnerDelegate {
  @objc func resized(to displaySize: MoEngageInApps.MoEngageInAppDisplaySize, in container: MoEngageInApps.MoEngageInAppContainer, xScale: CoreFoundation.CGFloat, yScale: CoreFoundation.CGFloat)
}
@objc extension MoEngageInApps.MoEngageInAppPrimaryContainerView : MoEngageInApps.MoEngageInAppWidgetResizingDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var originalWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var currentDisplaySize: MoEngageInApps.MoEngageInAppDisplaySize {
    @objc get
  }
  @objc(addListner:) @_Concurrency.MainActor @preconcurrency dynamic public func add(listner: any MoEngageInApps.MoEngageInAppWidgetResizingCallbackListnerDelegate)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func toggleFullscreen(animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func toggleFullscreen()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setDisplaySize()
}
@objc extension MoEngageInApps.MoEngageInAppContainer {
  @objc dynamic public func nonScalableHeight() -> CoreFoundation.CGFloat
}
@objc extension MoEngageInApps.MoEngageInAppWidgetStyle {
  @objc dynamic public var isFocusable: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class MoEngageInAppWidgetAlignmentUtil : ObjectiveC.NSObject {
  @objc public static func getWidgetAlignment(fromStringValue strValue: Swift.String) -> MoEngageInApps.MoEngageInAppWidgetAlignment
  @objc public static func getStringValue(for alignment: MoEngageInApps.MoEngageInAppWidgetAlignment) -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageNudgePositionsUtils : ObjectiveC.NSObject {
  @objc public static func getNudgePosition(from positionStr: Swift.String) -> MoEngageInApps.MoEngageNudgePosition
  @objc public static func getNudgeDisplayPosition(from positionStr: Swift.String) -> MoEngageInApps.MoEngageNudgeDisplayPosition
  @objc public static func getStringRepresentation(for position: MoEngageInApps.MoEngageNudgePosition) -> Swift.String
  @objc public static func getStringRepresentation(forDisplayPosition position: MoEngageInApps.MoEngageNudgeDisplayPosition) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKInApp : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageInApps.MoEngageSDKInApp
  @objc public func showInApp()
  @objc public func showInApp(forAppId appId: Swift.String? = nil)
  @available(tvOS, unavailable)
  @objc public func showNudge()
  @available(tvOS, unavailable)
  @objc public func showNudge(forAppId appId: Swift.String? = nil)
  @available(tvOS, unavailable)
  @objc public func showNudge(atPosition position: MoEngageInApps.MoEngageNudgePosition = NudgePositionAny)
  @available(tvOS, unavailable)
  @objc public func showNudge(atPosition position: MoEngageInApps.MoEngageNudgePosition = NudgePositionAny, forAppId appId: Swift.String? = nil)
  @objc public func getSelfHandledInApp(completionBlock: @escaping ((_ campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign?, _ accountMeta: MoEngageCore.MoEngageAccountMeta?) -> Swift.Void))
  @objc public func getSelfHandledInApp(forAppId appId: Swift.String? = nil, completionBlock: @escaping ((_ campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign?, _ accountMeta: MoEngageCore.MoEngageAccountMeta?) -> Swift.Void))
  @objc public func getSelfHandledInApps(completionBlock: @escaping (_ campaignData: MoEngageInApps.MoEngageInAppSelfHandledData) -> Swift.Void)
  @objc public func getSelfHandledInApps(for appId: Swift.String, completionBlock: @escaping (_ campaignData: MoEngageInApps.MoEngageInAppSelfHandledData) -> Swift.Void)
  @objc public func selfHandledShown(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign)
  @objc public func selfHandledShown(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign, forAppId appId: Swift.String? = nil)
  @objc public func selfHandledClicked(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign)
  @objc public func selfHandledClicked(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign, forAppId appId: Swift.String? = nil)
  @objc public func selfHandledDismissed(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign)
  @objc public func selfHandledDismissed(campaignInfo: MoEngageInApps.MoEngageInAppSelfHandledCampaign, forAppId appId: Swift.String? = nil)
  @objc public func disableInApps()
  @objc public func disableInApps(forAppId appId: Swift.String? = nil)
  @objc public func blockInApp(forViewController viewController: UIKit.UIViewController)
  @objc public func blockInApp(forViewController viewController: UIKit.UIViewController, forAppId appId: Swift.String? = nil)
  @objc public func setCurrentInAppContexts(_ contexts: [Swift.String])
  @objc public func setCurrentInAppContexts(_ contexts: [Swift.String], forAppId appId: Swift.String? = nil)
  @objc public func invalidateInAppContexts()
  @objc public func invalidateInAppContexts(forAppId appId: Swift.String? = nil)
  @objc public func setInAppDelegate(_ delegate: any MoEngageInApps.MoEngageInAppNativeDelegate)
  @objc public func setInAppDelegate(_ delegate: any MoEngageInApps.MoEngageInAppNativeDelegate, forAppId appId: Swift.String? = nil)
  @objc public func resetInAppDelegate()
  @objc public func resetInAppDelegate(forAppId appId: Swift.String? = nil)
  @objc deinit
}
extension MoEngageInApps.MoEngageNavigationType : Swift.Equatable {}
extension MoEngageInApps.MoEngageNavigationType : Swift.Hashable {}
extension MoEngageInApps.MoEngageNavigationType : Swift.RawRepresentable {}
extension MoEngageInApps.MoEngageInAppRatingType : Swift.Equatable {}
extension MoEngageInApps.MoEngageInAppRatingType : Swift.Hashable {}
extension MoEngageInApps.MoEngageInAppRatingType : Swift.RawRepresentable {}
extension MoEngageInApps.MoEngageInAppEligibleCriteria : Swift.Equatable {}
extension MoEngageInApps.MoEngageInAppEligibleCriteria : Swift.Hashable {}
extension MoEngageInApps.MoEngageInAppEligibleCriteria : Swift.RawRepresentable {}
extension MoEngageInApps.MoEngageInAppViewVisibility : Swift.Equatable {}
extension MoEngageInApps.MoEngageInAppViewVisibility : Swift.Hashable {}
extension MoEngageInApps.MoEngageInAppViewVisibility : Swift.RawRepresentable {}
