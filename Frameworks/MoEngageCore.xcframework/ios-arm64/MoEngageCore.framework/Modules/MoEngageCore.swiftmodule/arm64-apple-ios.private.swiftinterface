// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MoEngageCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import Darwin
import Foundation
import ImageIO
@_exported import MoEngageCore
import MoEngageSecurity
import OSLog
import SafariServices
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
public enum AnyMoEngageCodable : Swift.Codable, Swift.Hashable {
  case bool(Swift.Bool)
  case int64(Swift.Int64)
  case double(Swift.Double)
  case string(Swift.String)
  case array([MoEngageCore.AnyMoEngageCodable])
  case dictionary([Swift.String : MoEngageCore.AnyMoEngageCodable])
  public var value: Any {
    get
  }
  public init?(value: Any)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.AnyMoEngageCodable, b: MoEngageCore.AnyMoEngageCodable) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum AnyMoEngagePrimitiveValue : Swift.Codable, Swift.Hashable {
  case none
  case bool(Swift.Bool)
  case int64(Swift.Int64)
  case double(Swift.Double)
  case string(Swift.String)
  case array([MoEngageCore.AnyMoEngagePrimitiveValue])
  case dictionary([Swift.String : MoEngageCore.AnyMoEngagePrimitiveValue])
  public var value: Any? {
    get
  }
  public init(value: Any?) throws
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.AnyMoEngagePrimitiveValue, b: MoEngageCore.AnyMoEngagePrimitiveValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MoEngageStringConvertibleModel {
  var description: Swift.String { get }
}
extension MoEngageCore.MoEngageStringConvertibleModel {
  public var description: Swift.String {
    get
  }
}
public protocol MoEngageDictionaryConvertible : Swift.Decodable, Swift.Encodable {
  func convertToDict() -> [Swift.String : Any]?
}
extension MoEngageCore.MoEngageDictionaryConvertible {
  public func convertToDict() -> [Swift.String : Any]?
}
@_inheritsConvenienceInitializers @objc public class MoEngageAccountMeta : ObjectiveC.NSObject {
  @objc final public let appID: Swift.String
  @objc public init(withInstanceID instanceID: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public struct MoEngageAggregatedStorage<Value> : MoEngageCore.MoEngageStorageLocation {
  public init<Location>(primary: Location, continueMigration: @escaping (Value) -> Swift.Bool, @MoEngageCore.MoEngageMigrationBuilder<Value> migration: () -> [MoEngageCore.MoEngageAggregatedStorage<Value>.Migration.Item]) where Value == Location.Stored, Location : MoEngageCore.MoEngageStorageLocation
  public init<Location, WrappedValue>(primary: Location, @MoEngageCore.MoEngageMigrationBuilder<Swift.Optional<WrappedValue>> migration: () -> [MoEngageCore.MoEngageAggregatedStorage<Value>.Migration.Item]) where Value == WrappedValue?, Location : MoEngageCore.MoEngageStorageLocation, Location.Stored == WrappedValue?
  public init<Location>(primary: Location, @MoEngageCore.MoEngageMigrationBuilder<Swift.Bool> migration: () -> [MoEngageCore.MoEngageAggregatedStorage<Value>.Migration.Item]) where Value == Swift.Bool, Location : MoEngageCore.MoEngageStorageLocation, Location.Stored == Swift.Bool
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Value
  public func save(_ value: Value, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public struct Migration {
    public struct Item {
    }
  }
  public typealias Stored = Value
}
@_functionBuilder public struct MoEngageMigrationBuilder<Value> {
  public typealias MigrationItem = MoEngageCore.MoEngageAggregatedStorage<Value>.Migration.Item
  public static func buildPartialBlock<Location>(first: Location) -> [MoEngageCore.MoEngageMigrationBuilder<Value>.MigrationItem] where Value == Location.Stored, Location : MoEngageCore.MoEngageStorageLocation
  public static func buildPartialBlock<Location>(accumulated: [MoEngageCore.MoEngageMigrationBuilder<Value>.MigrationItem], next: Location) -> [MoEngageCore.MoEngageMigrationBuilder<Value>.MigrationItem] where Value == Location.Stored, Location : MoEngageCore.MoEngageStorageLocation
  public static func buildPartialBlock(accumulated: [MoEngageCore.MoEngageMigrationBuilder<Value>.MigrationItem], next: @escaping (MoEngageCore.MoEngageSDKInstance) -> Value) -> [MoEngageCore.MoEngageMigrationBuilder<Value>.MigrationItem]
}
public struct MoEngageAnalyticsConstants {
  public struct UserAttributeNames {
    public static let uniqueID: Swift.String
    public static let emailID: Swift.String
    public static let mobileNumber: Swift.String
    public static let userName: Swift.String
    public static let firstName: Swift.String
    public static let lastName: Swift.String
    public static let dateOfBirth: Swift.String
    public static let userLocation: Swift.String
    public static let gender: Swift.String
  }
  public struct UserIdentityNames {
    public static let uid: Swift.String
    public static let email: Swift.String
    public static let mobileNumber: Swift.String
    public static let userName: Swift.String
    public static let firstName: Swift.String
    public static let lastName: Swift.String
    public static let dateOfBirth: Swift.String
    public static let location: Swift.String
    public static let gender: Swift.String
  }
  public struct DeviceAttributeNames {
    public static let pushOpted: Swift.String
    public static let provisionalOpted: Swift.String
  }
}
@objc @_inheritsConvenienceInitializers open class MoEngageAnalyticsDelegate : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func initializeAnalytics(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func flush(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidBecomeActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationWillResignActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterBackground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func resetDataAfterUnRegistration(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func syncExistingDataBeforeUnRegisteration(sdkInstance: MoEngageCore.MoEngageSDKInstance, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func updateOnRemoteConfigSync(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MoEngageAnalyticsDelegateHandler : MoEngageCore.MoEngageAnalyticsDelegate, MoEngageCore.MoEngageAppDelegateAnalyticsProxyProtocol {
  public static var sharedInstance: MoEngageCore.MoEngageAnalyticsDelegateHandler?
  override public func initializeAnalytics(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func handleOpenURL(_ url: Foundation.URL)
  override public func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationDidBecomeActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationWillResignActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationDidEnterBackground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func trackEventForRichNotification(name: Swift.String, properties: MoEngageCore.MoEngageProperties? = nil, sdkInstance: MoEngageCore.MoEngageSDKInstance, completionBlock: (() -> Swift.Void)? = nil)
  override public func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  override public func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func resetDataAfterUnRegistration(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func syncExistingDataBeforeUnRegisteration(sdkInstance: MoEngageCore.MoEngageSDKInstance, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  override public func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func updateOnRemoteConfigSync(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageAnalyticsHandler : ObjectiveC.NSObject {
  @objc public static func setUserAttributeBool(_ value: Swift.Bool, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public static func pushOptInStatusUpdated(to status: Swift.Bool, forSdkInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func pushProvisionalStatusUpdated(to status: Swift.Bool, forSdkInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func getUserUniqueId(for sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String?
  public static func getUserIdentities(for sdkInstance: MoEngageCore.MoEngageSDKInstance) -> [Swift.String : Swift.String]
  public static func flush(for sdkInstance: MoEngageCore.MoEngageSDKInstance, allowEmptyFlush: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageAnalyticsManager : ObjectiveC.NSObject, MoEngageCore.MoEngageEnvironmentMigratable {
  @objc public static let sharedInstance: MoEngageCore.MoEngageAnalyticsManager
  @objc open func initializeAnalytics(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidBecomeActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationWillResignActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterBackground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func resetDataAfterUnRegistration(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func syncExistingDataBeforeUnRegisteration(sdkInstance: MoEngageCore.MoEngageSDKInstance, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func updateOnRemoteConfigSync(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public protocol MoEngageAnalyticsCallBack {
  @objc optional func didLogOut(from accountMeta: MoEngageCore.MoEngageAccountMeta)
}
public struct MoEngageAnalyticsSource : Swift.Codable, Swift.Hashable {
  public init(withSourceInfoDict infoDict: [Swift.AnyHashable : Any], andInstanceID instanceID: Swift.String, withConfigController configController: MoEngageCore.MoEngageSDKInstance)
  public init(withURL urlStr: Swift.String, andInstanceID instanceID: Swift.String, withConfigController configController: MoEngageCore.MoEngageSDKInstance)
  public func isValidSource() -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageAnalyticsSource, b: MoEngageCore.MoEngageAnalyticsSource) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc public enum MoEngageUserGender : Swift.Int {
  case male = 0
  case female
  case others
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MoEngageAppStatus : Swift.Int {
  case install = 0
  case update
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MoEngageAnalyticsUtils {
  public class func getIDFA(checkIntegrationError: Swift.Bool) -> Swift.String?
  public static func trackSDKVersion(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public protocol MoEngageAppDelegateAnalyticsProxyProtocol {
  @objc func handleOpenURL(_ url: Foundation.URL)
}
@objc public protocol MoEngageAppDelegateMessagingProxyProtocol {
  @objc func applicationDidRegisterForRemoteNotifications(withDeviceToken deviceToken: Foundation.Data?)
  @objc func applicationDidFailToRegisterForRemoteNotificationsWithError(_ error: (any Swift.Error)?)
  @objc func applicationDidReceiveRemoteNotification(_ userInfo: [Swift.AnyHashable : Any]?)
  @objc func userNotificationCenterWillPresent(_ notification: UserNotifications.UNNotification?)
  @objc @available(tvOS, unavailable)
  func userNotificationCenterDidReceive(_ response: UserNotifications.UNNotificationResponse?)
}
public struct MoEngageAppPersonalizationConstants {
  public struct StatEvents {
  }
  public struct Attributes {
  }
}
public struct MoEngageOfferingConstants {
  public struct StatEvents {
  }
  public struct Attributes {
  }
}
public struct MoEngageArchivedFileStorage<DataModel> : MoEngageCore.MoEngageStorageLocation where DataModel : ObjectiveC.NSObject, DataModel : Foundation.NSCoding {
  public init(relativePath: Swift.String, scope: MoEngageCore.MoEngageStorageScope, map: [Swift.String : Swift.AnyClass] = [:])
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> DataModel?
  public func save(_ value: DataModel?, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = DataModel?
}
@objc @_inheritsConvenienceInitializers open class MoEngageAsyncOperation : Foundation.Operation {
  public enum State : Swift.String {
    case isReady
    case isExecuting
    case isFinished
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  open var state: MoEngageCore.MoEngageAsyncOperation.State {
    get
    set
  }
  @objc override dynamic open var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func start()
  @objc override dynamic open func cancel()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MoEngageGeneralAsyncOperation : MoEngageCore.MoEngageAsyncOperation {
  public init(task: @escaping (@escaping () -> Swift.Void) -> Swift.Void)
  @objc override dynamic public func main()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MoEngageCardsHandler : ObjectiveC.NSObject, MoEngageCore.MoEngageModule {
  @objc required override dynamic public init()
  @objc open func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  open func logout(onUserReset: Swift.Bool = true, sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func initializeCards(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationWillBecomeInActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeCardsDataFromStorage(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func userUniqueIdUpdated(for sdkInstance: MoEngageCore.MoEngageSDKInstance, from previousId: Swift.String?, to newId: Swift.String)
  open func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageCardsManager : ObjectiveC.NSObject, MoEngageCore.MoEngageEnvironmentMigratable {
  @objc public static let sharedInstance: MoEngageCore.MoEngageCardsManager
  public func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  public func logout(onUserReset: Swift.Bool = true, sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func initializeCards(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationWillBecomeInActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func removeCardsDataFromStorage(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func userUniqueIdUpdated(for sdkInstance: MoEngageCore.MoEngageSDKInstance, from previousId: Swift.String?, to newId: Swift.String)
  public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageColorUtils {
  public static func hexToRGB(hex: Swift.String, alpha: Swift.Float = 1.0) -> UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MoEngageConfigDelegate : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersion(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MoEngageConfigDelegateHandler : MoEngageCore.MoEngageConfigDelegate {
  override public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  override public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateDataFromPreviousVersion(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  override public func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageConfigManager : MoEngageCore.MoEngageEnvironmentMigratable {
  public static let sharedInstance: MoEngageCore.MoEngageConfigManager
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func migrateDataFromPreviousVersion(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  public func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public class MoEngageConsoleLogConfig : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible, MoEngageCore.MoEngageStringConvertibleModel {
  @objc final public let isLoggingEnabled: Swift.Bool
  @objc final public let loglevel: MoEngageCore.MoEngageLoggerType
  @objc public init(isLoggingEnabled: Swift.Bool, loglevel: MoEngageCore.MoEngageLoggerType)
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageConsoleLogConfig
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class MoEngageCoreCache : ObjectiveC.NSObject {
  public var integrationInfo: [MoEngageCore.MoEngageIntegrationInfo] {
    get
  }
  @objc public var isPartnerInitialized: Swift.Bool
  public func addIntegrationInfo(_ info: MoEngageCore.MoEngageIntegrationInfo)
  @objc override dynamic public init()
  @objc deinit
}
public struct MoEngageCoreConstants {
  public static let moe: Swift.String
  public struct UserDefault {
    public static let suitName: Swift.String
    public struct Keys {
      public static let sdkVersion: Swift.String
      public static let prevSDKVersion: Swift.String
      public static let sdkUniqueID: Swift.String
      public static let sdkEnabled: Swift.String
      public static let trackReInstall: Swift.String
      public static let isJWTAuthEnabled: Swift.String
      public static let moengageRemoteConfig: Swift.String
    }
  }
  public struct DateTimeFormats {
    public static let iso8601: Swift.String
    public static let iso8601WithoutZ: Swift.String
    public static let iso8601MilliSec: Swift.String
    public static let short: Swift.String
    public static let timeWithoutZ: Swift.String
    public static let timeWithMilliSec: Swift.String
  }
  public struct Notifications {
    public struct Names {
      public static let userReset: Swift.String
      public static let updateModules: Swift.String
      public static let showInApp: Swift.String
    }
    public struct UserInfoKeys {
      public static let instanceID: Swift.String
    }
  }
  public struct DeviceType {
    public static let tablet: Swift.String
    public static let mobile: Swift.String
    public static let tv: Swift.String
  }
  public struct RequestPayloadKeys {
  }
  public static let debugIdentifier: Swift.String
  public static let encryptedFolder: Swift.String
  public struct Events {
    public static let appExit: Swift.String
    public static let logout: Swift.String
    public static let install: Swift.String
    public static let update: Swift.String
    public static let reinstall: Swift.String
    public static let appOpened: Swift.String
    public static let appClosed: Swift.String
    public static let userAttributeAction: Swift.String
    public static let cardDelivered: Swift.String
    public static let cardInboxClicked: Swift.String
    public static let cardImpression: Swift.String
    public static let cardClicked: Swift.String
    public static let cardDismissed: Swift.String
    public static let pushNotificationReceived: Swift.String
    public static let pushNotificationClicked: Swift.String
    public static let pushPreferenceChanged: Swift.String
    public static let pushPermissionStateAllowed: Swift.String
    public static let pushPermissionStateBlocked: Swift.String
    public static let notificationPermissionRequestAttempted: Swift.String
  }
  public struct PayloadKeys {
    public static let requestTime: Swift.String
    public static let batchID: Swift.String
    public static let devicePreference: Swift.String
    public static let meta: Swift.String
    public static let queryParams: Swift.String
    public static let integrations: Swift.String
    public static let eventTrackingPref: Swift.String
    public static let requestID: Swift.String
    public static let identifiers: Swift.String
    public static let useridentities: Swift.String
    public static let previousIdentities: Swift.String
    public static let uid: Swift.String
  }
  public enum ConditionEvaluatorConstants {
    public static let appVersion: Swift.String
    public static let sdkVersion: Swift.String
    public static let platform: Swift.String
    public static let platformiOS: Swift.String
    public static let eventAttributes: Swift.String
  }
  public struct ModuleInfoKeys {
    public static let deviceProperties: Swift.String
  }
}
@objc public enum MoEngageInAppWhiteList : Swift.Int {
  case inAppShown
  case inAppClicked
  case inAppDismissed
  case inAppAutoDismissed
  case inAppRating
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageCoreHandler : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageCoreHandler
  @objc public static let globalQueue: Dispatch.DispatchQueue
  public func setupSDK(_ sdkConfig: MoEngageCore.MoEngageSDKConfig, isDefault: Swift.Bool = true) -> MoEngageCore.MoEngageSDKInstance?
  public func initializeModule(sdkInstance: MoEngageCore.MoEngageSDKInstance, sdkState: MoEngageCore.MoEngageSDKState, environmentChangeHandler: any MoEngageCore.MoEngageEnvironmentMigrationHandlerProtocol = MoEngageEnvironmentMigrationHandler())
  @objc public func initializeInstanceWithSDKConfig(_ sdkConfig: MoEngageCore.MoEngageSDKConfig, isDefaultInstance: Swift.Bool) -> MoEngageCore.MoEngageSDKInstance?
  @objc public func getDefaultSDKConfiguration() -> MoEngageCore.MoEngageSDKConfig?
  @objc public func getSDKConfig(forAppID appID: Swift.String) -> MoEngageCore.MoEngageSDKConfig?
  @objc public func getAllSDKConfigs() -> [MoEngageCore.MoEngageSDKConfig]
  @objc public func isSDKEnabled() -> Swift.Bool
  @objc public func updateSDKState(sdkInstance: MoEngageCore.MoEngageSDKInstance, sdkState: Swift.Bool)
  @objc public func enableSDK(appId: Swift.String? = nil)
  @objc public func disableSDK(appId: Swift.String? = nil)
  @objc public func isSDKEnabledForInstance(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public func isDeviceUniqueIDPresentInKeyChain(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public func dismissRichLandingWebViewControllerWithAnimation(_ animate: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageCoreIntegrator : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageCoreIntegrator
  @objc public func addIntergrationInfo(info: MoEngageCore.MoEngageIntegrationInfo, appId: Swift.String? = nil)
  @objc public func getCoreCache(_ sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageCoreCache
  @objc public func enableSDKForPartner(workspaceId: Swift.String, integrationType: MoEngageCore.MoEngagePartnerIntegrationType)
  @objc deinit
}
public struct MoEngageCoreStateSpecification {
  public static let `default`: MoEngageCore.MoEngageCoreStateSpecification
  public var pushToken: MoEngageCore.MoEngageAggregatedStorage<Swift.String?> {
    get
  }
  public var isTestEnvironment: MoEngageCore.MoEngageTwoWayStorage<MoEngageCore.MoEngageKeyPathStorage<MoEngageCore.MoEngageMappingStorage<MoEngageCore.MoEngageOptional<MoEngageCore.MoEngageSDKCoreData>, MoEngageCore.MoEngageFileStorage<MoEngageCore.MoEngageSDKCoreData>>, Swift.Bool?>, MoEngageCore.MoEngageKeyPathStorage<MoEngageCore.MoEngageMappingStorage<MoEngageCore.MoEngageOptional<MoEngageCore.MoEngageSDKCoreExtensionData>, MoEngageCore.MoEngageFileStorage<MoEngageCore.MoEngageSDKCoreExtensionData>>, Swift.Bool?>> {
    get
  }
  public var sdkUniqueID: MoEngageCore.MoEngageDefaultValueStorage<MoEngageCore.MoEngageAggregatedStorage<Swift.String?>, Swift.String>
  public var isFirstAppOpen: MoEngageCore.MoEngageDefaultValueStorage<MoEngageCore.MoEngageKeyPathStorage<MoEngageCore.MoEngageMappingStorage<MoEngageCore.MoEngageOptional<MoEngageCore.MoEngageSDKCommonData>, MoEngageCore.MoEngageFileStorage<MoEngageCore.MoEngageSDKCommonData>>, Swift.Bool?>, Swift.Bool>
  public let moeParams: MoEngageCore.MoEngageMappingStorage<[Swift.String : Any], MoEngageCore.MoEngageTwoWayStorage<MoEngageCore.AnyMoEngageStorageLocation<[Swift.String : Any]?>, MoEngageCore.MoEngageAggregatedStorage<[Swift.String : Any]?>>>
}
extension MoEngageCore.MoEngageCoreStateSpecification {
  public static func commonStorage() -> MoEngageCore.MoEngageFileStorage<MoEngageCore.MoEngageSDKCommonData>
  public static func coreStorage() -> MoEngageCore.MoEngageFileStorage<MoEngageCore.MoEngageSDKCoreData>
  public static func coreExtensionStorage() -> MoEngageCore.MoEngageFileStorage<MoEngageCore.MoEngageSDKCoreExtensionData>
  public static func coreExtensionMetadataProperty<T>(atPath key: Swift.String, type: T.Type) -> MoEngageCore.MoEngageAggregatedStorage<T?>
  public static func coreExtensionMetadataProperty(atPath key: Swift.String) -> MoEngageCore.MoEngageAggregatedStorage<Any?>
}
public enum MoEngageExceptions : Swift.Error {
  case mandatoryParamsMissing
  case mainThreadCheckFailed
  public static func == (a: MoEngageCore.MoEngageExceptions, b: MoEngageCore.MoEngageExceptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MoEngageCoreUtils : ObjectiveC.NSObject {
  @objc public static func getMaxParallelInstancesSupported() -> Swift.Int
  @objc public static func getSDKInstance(forInstanceID instanceID: Swift.String?) -> MoEngageCore.MoEngageSDKConfig?
  @objc public static func getSDKLibraryDirectoryPath() -> Swift.String?
  @objc public static func getInstanceRootDirectoryPath(forIdentifier identifier: Swift.String) -> Swift.String?
  @objc public static func getDocumentsDirectoryPath() -> Swift.String?
  @objc public static func removeFile(atPath path: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func removeDirectory(_ path: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func removeDirectory(folderPath: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func getAbsolutePath(folderPath: Swift.String, relativePath: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String?
  public static func removeFilePath(folderPath: Swift.String, relativePath: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func getAbsolutePathForSingleInstance(folderPath: Swift.String, relativePath: Swift.String) -> Swift.String?
  public static func getFolderPathForInstanceId(folderPath: Swift.String, identifier: Swift.String, shouldCreateFolder: Swift.Bool = true) -> Swift.String?
  @objc public static func getTopMostViewController() -> UIKit.UIViewController?
  @objc public static func showAlertView(withMessage msg: Swift.String, andTitle title: Swift.String)
  @available(iOSApplicationExtension, unavailable)
  @objc public static func openDeeplink(withUrlString urlStr: Swift.String?)
  @objc public static func openExternalBrowser(withUrlString urlStr: Swift.String?)
  @objc public static func getUrlFromString(_ urlStr: Swift.String?) -> Foundation.URL?
  @available(iOSApplicationExtension, unavailable)
  @objc public static func openDeeplink(withUrl url: Foundation.URL?)
  @objc public static func openRichLanding(withUrlString urlStr: Swift.String?)
  @objc public static func openRichLanding(withUrl url: Foundation.URL?)
  @objc public static func getMoEngageSDKVersion() -> Swift.String
  @objc public static func getAppVersion() -> Swift.String
  @objc public static func getMainTargetAppVersion() -> Swift.String
  @objc public static func getAppBundleId() -> Swift.String
  @objc public static func getIDFV() -> Swift.String?
  @objc public static func getDeviceModel() -> Swift.String
  @objc public static func getDeviceOSVersion() -> Swift.String
  @objc public static func getDeviceModelName() -> Swift.String
  @objc public static func getDeviceModelType() -> Swift.String
  @objc public static func savePushToken(token: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func getPushToken(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String?
  @objc public static func getSDKUniqueIdForInstance(_ sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String
  @objc public static func generateSDKUniqueID() -> Swift.String
  @objc public static func isSdkEnabledForInstance(_ sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func fetchMoEngageSDKState(_ sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageSDKState
  @objc public static func isAnalyticsEnabled(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func updateSDKState(_ isEnabled: Swift.Bool, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func isDataTrackingEnabled(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func setDataTrackingOptOutStatus(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance, optOutStatus: Swift.Bool)
  @objc public static func sharedUIApplication() -> UIKit.UIApplication?
  @objc public static var isAppInBackground: Swift.Bool
  @objc public static func setIDFAOptOutStatus(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance, optOutStatus: Swift.Bool)
  @objc public static func setIDFVOptOutStatus(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance, optOutStatus: Swift.Bool)
  @objc public static func isIDFATrackingEnabled(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func isIDFVTrackingEnabled(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  public static func initializeAllModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func isValidNumber<T>(number: T) -> Swift.Bool where T : Swift.ExpressibleByFloatLiteral, T : Swift.FloatingPoint
  @objc public static func getAccountMeta(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageAccountMeta
  @objc public static func getStringRepresentation(event: MoEngageCore.MoEngageInAppWhiteList) -> Swift.String
  @objc public static func isUserRegistered(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func updateUserRegisterState(state: MoEngageCore.MoEngageRegistrationState, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func getIDFA(checkIntegrationError: Swift.Bool) -> Swift.String?
  @objc public static func generateHashValue(from input: Swift.String) -> Swift.String
  public static func mapJSONToString(data: [Swift.String : Any]) -> Swift.String?
  public static func mapAnyObjectToDict(data: Any?) -> [Swift.String : Any]?
  public static func mapStringToJSON(str: Swift.String) -> [Swift.String : Any]?
  public static func mapBase64ToJSON(str: Swift.String) -> [Swift.String : Any]?
  public static func getIntegrationInfoFromAppGroupId(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> [[Swift.String : Any]]?
  public static func getStringFromHTML(_ htmlString: Swift.String) -> Swift.String?
  public static func getDoubleValue(from string: Swift.String) -> Swift.Double?
  public static func isValueEqual(_ existing: Any, with value: Any) -> Swift.Bool
  public static func isTypeEqual(_ existing: Any, with value: Any) -> Swift.Bool
  public static func isTestWorkspaceId(_ workspaceId: Swift.String) -> Swift.Bool
  public static func nonFormattedWorkspaceId(from workspaceId: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ValidateExtension : ObjectiveC.NSObject {
  @objc public static func isFromExtension() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension MoEngageCore.MoEngageCoreUtils {
  public static func convertToArrayDict<T>(input: [T]) -> [[Swift.String : Any]]? where T : MoEngageCore.MoEngageDictionaryConvertible
  public static func getObjectArray<T>(input: [[Swift.String : Any]]?) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public static func getObject<T>(input: [Swift.String : Any]?) -> T? where T : Swift.Decodable, T : Swift.Encodable
}
@objc public enum MoEngageDataCenter : Swift.Int, Swift.CaseIterable, Swift.CustomStringConvertible {
  case data_center_default
  case data_center_01
  case data_center_02
  case data_center_03
  case data_center_04
  case data_center_05
  case data_center_06
  public static func getDataCenter(dataCenter: Swift.String) -> MoEngageCore.MoEngageDataCenter
  public func label(prefix: Swift.String, suffix: Swift.String = "") -> Swift.String
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [MoEngageCore.MoEngageDataCenter]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [MoEngageCore.MoEngageDataCenter] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MoEngageDataTrackingUtils {
  public static func getPeriodicFlushDuration(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageDateUtils : ObjectiveC.NSObject {
  @objc public static func dateFormatter(forFormat format: Swift.String?, andforGMT isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func dateFormatterForUsPosixLocale(withFormat format: Swift.String, forGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func dateFormatterForDeviceLocale(withFormat format: Swift.String, forGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func isDate1(_ date1: Foundation.Date, sameAsDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDate1(_ date1: Foundation.Date, laterToDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDate1(_ date1: Foundation.Date, earlierToDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDateLaterToCurrentTime(_ date: Foundation.Date) -> Swift.Bool
  @objc public static func checkDateInRange(_ dateToEvaluate: Foundation.Date?, fromStartDate startDate: Foundation.Date?, toEndDate endDate: Foundation.Date?) -> Swift.Bool
  @objc public static func checkTimeInRange(_ timeToEvaluate: Foundation.DateComponents, fromStartTime startTime: Foundation.DateComponents, toEndTime endTime: Foundation.DateComponents) -> Swift.Bool
  @objc public static func getGMTtimeEpoch(forDate date: Foundation.Date? = nil) -> Swift.String
  @objc public static func getGMTtimeEpochMilliSeconds(forDate date: Foundation.Date? = nil) -> Swift.Int64
  @objc public static func getLocalTimeForEventsPayload(forDate date: Foundation.Date? = nil) -> Swift.String?
  @objc public static func dateByAddingDays(_ days: Swift.UInt, toDate date: Foundation.Date) -> Foundation.Date?
  @objc public static func dateBySubtractingDays(_ days: Swift.UInt, toDate date: Foundation.Date) -> Foundation.Date?
  @objc public static func getDateComponentsFromTimeString(_ timeString: Swift.String?) -> Foundation.DateComponents?
  @objc public static func getString(forDate date: Foundation.Date?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Swift.String?
  @objc public static func getStringInDeviceLocale(forDate date: Foundation.Date?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Swift.String?
  @objc public static func getDate(forString str: Swift.String?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.Date?
  public static func getDateFromISOString(_ dateString: Swift.String?) -> Foundation.Date?
  public static func getEpochDate(date: Foundation.Date) -> Swift.Double
  public static func getDateFromEpoch(epoch: Swift.Double) -> Foundation.Date
  public static func getCurrentEpochTimeInMilliSeconds() -> Swift.Double
  public static func getDayOfTheWeek() -> Swift.String
  public static func getTimeOfTheDay() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MoEngageDebuggingUtils {
  public static var isDebuggerAttached: Swift.Bool {
    get
  }
  @objc deinit
}
public struct MoEngageDefaultStates {
  public static let defaultDataTrackingState: Swift.Bool
  public static let defaultSdKState: Swift.Bool
  public static let defaultReinstallState: Swift.Bool
  public static let defaultIsFirstAppOpenState: Swift.Bool
  public static let whitelistedEvents: [Swift.String]
  public static let instantFlushEvents: [Swift.String]
}
public struct MoEngageDefaultValueStorage<Wrapped, Default> : MoEngageCore.MoEngageStorageLocation where Wrapped : MoEngageCore.MoEngageStorageLocation, Wrapped.Stored == Default? {
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Default
  public func save(_ value: Default, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = Default
}
extension MoEngageCore.MoEngageStorageLocation {
  public func `default`<Default>(_ value: @autoclosure @escaping () -> Default, saveDefault: Swift.Bool = false) -> MoEngageCore.MoEngageDefaultValueStorage<Self, Default> where Self.Stored == Default?
}
@objc @_hasMissingDesignatedInitializers final public class MoEngageDelayedOperation : Foundation.Operation {
  @objc override final public var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override final public var isConcurrent: Swift.Bool {
    @objc get
  }
  @objc override final public var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override final public var isFinished: Swift.Bool {
    @objc get
  }
  @objc override final public func start()
  @objc override final public func main()
  @objc override final public func cancel()
  @objc deinit
}
extension MoEngageCore.MoEngageDelayedOperation {
  @_hasMissingDesignatedInitializers @objcMembers @objc(MoEngageDelayedOperationContinuation) final public class Continuation : ObjectiveC.NSObject {
    @objc final public func fulfill()
    @objc deinit
  }
}
@objc @objcMembers final public class MoEngageDelayedOperationManager : ObjectiveC.NSObject {
  @objc public init(named name: Swift.String, forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc final public func schedule(id: Swift.String, withDelay delay: Swift.Double, performingAction action: @escaping (MoEngageCore.MoEngageDelayedOperation.Continuation) -> Swift.Void, cancellation: @escaping () -> Swift.Void)
  @objc final public func isAlreadyScheduled(forId id: Swift.String) -> Swift.Bool
  @objc final public func cancelAll()
  @objc deinit
}
public struct MoEngageDeviceEntryUtils {
  public static func getNewDeviceEntryRequestBody(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> ([Swift.String : Any]?, Swift.String?)
  public static func getDevicePreferences(sdkInstance: MoEngageCore.MoEngageSDKInstance, forOnlyOptOutStatus onlyOptout: Swift.Bool) -> [Swift.String : Swift.Bool]?
}
public struct MoEngageEnvironmentMigrationHandler : MoEngageCore.MoEngageEnvironmentMigrationHandlerProtocol {
  public init()
  public func migrateEnvironmentIfNeeded(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance, migrating modules: any MoEngageCore.MoEngageEnvironmentMigratable...)
}
public protocol MoEngageEnvironmentMigratable {
  func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
}
public protocol MoEngageEnvironmentMigrationHandlerProtocol {
  func migrateEnvironmentIfNeeded(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance, migrating modules: any MoEngageCore.MoEngageEnvironmentMigratable...)
}
public protocol MoEngageEnvironmentMigrationHandlerDataManager {
  func fetchCoreData(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageSDKCoreData?
  func saveCoreData(_ data: MoEngageCore.MoEngageSDKCoreData, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  func resetCoreData(afterEnvironmentUpdatedForSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
}
@objc public class MoEngageEventConditionEvaluator : ObjectiveC.NSObject {
  @objc public init(withEventName name: Swift.String, andConditionDict conditionDict: [Swift.String : Any])
  @objc public func checkConditionSatisfied(forEvent event: Swift.String, andAttributesPayload attributesPayload: [Swift.String : Any], inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc deinit
}
extension Swift.Decoder {
  public func moEngageSDKInstance() -> MoEngageCore.MoEngageSDKInstance?
}
public struct MoEngageFileStorage<DataModel> : MoEngageCore.MoEngageStorageLocation where DataModel : MoEngageCore.MoEngageDataModel {
  public init(filePath: Swift.String, scope: MoEngageCore.MoEngageStorageScope, optimizeReadWrite: Swift.Bool = true)
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> DataModel?
  public func save(_ value: DataModel?, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = DataModel?
}
public protocol MoEngageDataModel : Swift.Decodable, Swift.Encodable {
  static var flushDuration: Dispatch.DispatchTimeInterval { get }
}
@_hasMissingDesignatedInitializers public class MoEngageFileStorageState<DataModel> : Swift.CustomDebugStringConvertible where DataModel : MoEngageCore.MoEngageDataModel {
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
extension MoEngageCore.MoEngageFileStorageState {
  public static func absoluteFilePath(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance, scope: MoEngageCore.MoEngageStorageScope, relativePath: Swift.String) -> Swift.String?
  public static func absoluteEncryptedFilePath(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance, scope: MoEngageCore.MoEngageStorageScope, relativePath: Swift.String) -> Swift.String?
  public static func absoluteNonEncryptedFilePath(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance, scope: MoEngageCore.MoEngageStorageScope, relativePath: Swift.String) -> Swift.String?
}
public struct MoEngageFileStorageStateStore {
  public static var fileManager: Foundation.FileManager {
    get
  }
  public static func saveStates(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance, force: Swift.Bool = true)
  public static func saveCommonStates(force: Swift.Bool = true)
}
public struct MoEngageFolderStorage<DataModel> : MoEngageCore.MoEngageStorageLocation where DataModel : MoEngageCore.MoEngageDataModel {
  public var fileStorage: (Swift.String) -> MoEngageCore.MoEngageFileStorage<DataModel>
  public init(folderPath: Swift.String, scope: MoEngageCore.MoEngageStorageScope, relativeFilePath: @escaping (DataModel) -> Swift.String)
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> [DataModel]
  public func save(_ values: [DataModel], inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = [DataModel]
}
@objc @_inheritsConvenienceInitializers open class MoEngageGeofenceHandler : ObjectiveC.NSObject, MoEngageCore.MoEngageModule {
  @objc required override dynamic public init()
  @objc open func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  open func initializeGeofence(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func onDataTrackingDisabled(_ sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageGeofenceManager : ObjectiveC.NSObject, MoEngageCore.MoEngageEnvironmentMigratable {
  @objc public static let sharedInstance: MoEngageCore.MoEngageGeofenceManager
  public func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  @objc open func initializeGeofence(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func onDataTrackingDisabled(_ sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public class MoEngageGeoLocation : ObjectiveC.NSObject {
  @objc public var latitude: Swift.Double
  @objc public var longitude: Swift.Double
  @objc public init(withLatitude lat: Swift.Double, andLongitude lng: Swift.Double)
  @objc deinit
}
public class MoEngageGifManager {
  public static var defaultManager: MoEngageCore.MoEngageGifManager
  open var haveCache: Swift.Bool
  open var remoteCache: [Foundation.URL : Foundation.Data]
  public init(memoryLimit: Swift.Int)
  @objc deinit
  public func startTimerIfNeeded()
  public func stopTimer()
  open func addImageView(_ imageView: UIKit.UIImageView) -> Swift.Bool
  open func deleteImageView(_ imageView: UIKit.UIImageView)
  open func updateCacheSize(for imageView: UIKit.UIImageView, add: Swift.Bool)
  open func clear()
  open func containsImageView(_ imageView: UIKit.UIImageView) -> Swift.Bool
  open func hasCache(_ imageView: UIKit.UIImageView) -> Swift.Bool
  public func setImage(_ image: UIKit.UIImage, inView view: UIKit.UIImageView, loopCount: Swift.Int = -1)
  public func setGifImage(_ gifImage: UIKit.UIImage, inView view: UIKit.UIImageView, loopCount: Swift.Int = -1)
  public static func createGifImage(fromData gifData: Foundation.Data) throws -> UIKit.UIImage
  public static func clearGif(in imageView: UIKit.UIImageView)
  public static func startAnimatingGif(in imageView: UIKit.UIImageView)
}
public enum MoEngageGzip {
  public static let maxWindowBits: Swift.Int32
}
public struct MoEngageCompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: MoEngageCore.MoEngageCompressionLevel
  public static let bestSpeed: MoEngageCore.MoEngageCompressionLevel
  public static let bestCompression: MoEngageCore.MoEngageCompressionLevel
  public static let defaultCompression: MoEngageCore.MoEngageCompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct MoEngageGzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: MoEngageCore.MoEngageGzipError.Kind, b: MoEngageCore.MoEngageGzipError.Kind) -> Swift.Bool
  }
  public let kind: MoEngageCore.MoEngageGzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
@objc public class MoEngageInAppConfig : ObjectiveC.NSObject {
  @objc public var shouldProvideDeeplinkCallback: Swift.Bool
  @objc public init(safeAreaInset: CoreFoundation.CGFloat)
  @objc public init(shouldProvideDeeplinkCallback: Swift.Bool = false)
  @objc public init(safeAreaInset: CoreFoundation.CGFloat, shouldProvideDeeplinkCallback: Swift.Bool)
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageInAppConfig
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageInAppManager : ObjectiveC.NSObject, MoEngageCore.MoEngageEnvironmentMigratable {
  @objc public static let sharedInstance: MoEngageCore.MoEngageInAppManager
  public func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  public func trackEvent(eventName: Swift.String, eventAttribute: [Swift.String : Any], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func initializeInApp(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func applicationEnteredForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func applicationWillResignActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func keyboardWillShow(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func keyboardDidHide(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func statusBarOrientationChanged(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func showInApp(notification: Foundation.Notification)
  public func migrateDataFromNoNEncryptionToEncryption(for sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  public func migrateDataFromPreviousVersions(for sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func syncInAppStatsData(for sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func removeInAppStorageData(for sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  @objc open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func userUniqueIdUpdated(for sdkInstance: MoEngageCore.MoEngageSDKInstance, from previousId: Swift.String?, to newId: Swift.String)
  public func userSessionChanged(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MoEngageInboxDelegate : ObjectiveC.NSObject, MoEngageCore.MoEngageModule {
  @objc required override dynamic public init()
  @objc open func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func initializeInbox(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageInboxManager : ObjectiveC.NSObject, MoEngageCore.MoEngageEnvironmentMigratable {
  @objc public static let sharedInstance: MoEngageCore.MoEngageInboxManager
  public func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func initializeInbox(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
public struct MoEngageInMemoryStorage<Key, Value> : MoEngageCore.MoEngageStorageLocation where Key : Swift.Hashable {
  public init(key: Key, scope: MoEngageCore.MoEngageInMemoryStorage<Key, Value>.Scope)
  public init(type: Value.Type, scope: MoEngageCore.MoEngageInMemoryStorage<Key, Value>.Scope) where Key == Swift.ObjectIdentifier
  public init<Root>(keyPath: Swift.KeyPath<Root, Value>, scope: MoEngageCore.MoEngageInMemoryStorage<Key, Value>.Scope) where Key == Swift.KeyPath<Root, Value>
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Value?
  public func save(_ value: Value?, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public enum Scope : Swift.String {
    case common
    case instance
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Stored = Value?
}
public struct MoEngageInSessionAttributesHandler {
  public static func getInSessionAttributes(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> [Swift.String : Any]
  public static func fetchUserType(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String
}
extension MoEngageCore.MoEngageSDKInstanceProvider {
  public static func getSDKInstance(appId: Swift.String? = nil) -> MoEngageCore.MoEngageSDKInstance?
  public static func getSDKConfig(appId: Swift.String? = nil) -> MoEngageCore.MoEngageSDKConfig?
  public static func fetchDataCenter(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageDataCenter?
}
@objc public class MoEngageIntegrationInfo : ObjectiveC.NSObject {
  @objc final public let integrationType: Swift.String
  @objc final public let integrationVersion: Swift.String
  @objc public init(pluginType: Swift.String, version: Swift.String)
  convenience public init(pluginType: MoEngageCore.MoEngagePartnerIntegrationType, version: Swift.String)
  @objc deinit
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func attachJWTProcessing(enabled: Swift.Bool = !MoEngageCoreUtils.isAppInBackground) -> any MoEngageCore.MoEngageNetworkTask
}
@objc public class MoEngageKeyChainConfig : ObjectiveC.NSObject {
  @objc final public let groupName: Swift.String
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageKeyChainConfig
  @objc required public init(groupName: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension MoEngageCore.MoEngageKeyChainConfig : MoEngageCore.MoEngageResettableValue {
  public static var resetValue: Self {
    get
  }
}
public struct MoEngageKeychainStorage : MoEngageCore.MoEngageStorageLocation {
  public init(name: Swift.String, accessGroup: Swift.String? = nil, scope: MoEngageCore.MoEngageStorageScope)
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String?
  public func save(_ value: Swift.String?, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = Swift.String?
}
public struct MoEngageKeyPathStorage<Location, Value> : MoEngageCore.MoEngageStorageLocation where Location : MoEngageCore.MoEngageStorageLocation, Value : MoEngageCore.MoEngageResettableValue {
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Value
  public func save(_ value: Value, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = Value
}
public protocol MoEngageResettableValue {
  static var resetValue: Self { get }
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional : MoEngageCore.MoEngageResettableValue {
  public static var resetValue: Swift.Optional<Wrapped> {
    get
  }
}
#else
extension Swift.Optional : MoEngageCore.MoEngageResettableValue {
  public static var resetValue: Swift.Optional<Wrapped> {
    get
  }
}
#endif
extension MoEngageCore.MoEngageStorageLocation {
  public func withPath<Value>(_ keyPath: Swift.WritableKeyPath<Self.Stored, Value>) -> MoEngageCore.MoEngageKeyPathStorage<Self, Value> where Value : MoEngageCore.MoEngageResettableValue
  public func withPath<Wrapped, Value>(_ keyPath: Swift.WritableKeyPath<Wrapped, Value?>) -> MoEngageCore.MoEngageKeyPathStorage<MoEngageCore.MoEngageMappingStorage<MoEngageCore.MoEngageOptional<Wrapped>, Self>, Value?> where Wrapped : MoEngageCore.MoEngageInitializableValue, Self.Stored == Wrapped?
  public func withPath<Wrapped, Value>(_ keyPath: Swift.WritableKeyPath<Wrapped, Value>) -> MoEngageCore.MoEngageKeyPathStorage<MoEngageCore.MoEngageMappingStorage<MoEngageCore.MoEngageOptional<Wrapped>, Self>, Value?> where Wrapped : MoEngageCore.MoEngageInitializableValue, Self.Stored == Wrapped?
}
public protocol MoEngageInitializableValue {
  init()
}
@dynamicMemberLookup public struct MoEngageOptional<Value> where Value : MoEngageCore.MoEngageInitializableValue {
  public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<Value, T?>) -> T? {
    get
    set
  }
  public subscript<T>(dynamicMember keyPath: Swift.WritableKeyPath<Value, T>) -> T? {
    get
    set
  }
}
public enum MoEngageKMM {
  public static var moduleInfos: [MoEngageCore.MoEngageModuleInfo] {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class MoEngageLiveActivityDelegate : ObjectiveC.NSObject, MoEngageCore.MoEngageModule {
  @objc required override dynamic public init()
  @objc open func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func initialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func process(url: Foundation.URL)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MoEngageLiveActivityManager : MoEngageCore.MoEngageEnvironmentMigratable {
  public static let sharedInstance: MoEngageCore.MoEngageLiveActivityManager
  final public func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  final public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  final public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  final public func initialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  final public func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  final public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public class MoEngageLogger : ObjectiveC.NSObject {
  @objc public init(sdkInstanceTag: Swift.String)
  public func log(logLevel: MoEngageCore.MoEngageLoggerType = .verbose, message: Swift.String, stackTrace: [Swift.String]? = nil, label: Swift.String? = nil, shouldLogContext: Swift.Bool = true, file: Swift.StaticString = #file, line: Swift.UInt = #line, method: Swift.String = #function)
  @objc @_disfavoredOverload public func log(logLevel: MoEngageCore.MoEngageLoggerType = .verbose, message: Swift.String, stackTrace: [Swift.String]? = nil, label: Swift.String? = nil, shouldLogContext: Swift.Bool = true, file: Swift.String = #file, line: Swift.UInt = #line, method: Swift.String = #function)
  public static func logDefault(logLevel: MoEngageCore.MoEngageLoggerType = .verbose, message: Swift.String, stackTrace: [Swift.String]? = nil, label: Swift.String? = nil, shouldLogContext: Swift.Bool = true, file: Swift.StaticString = #file, line: Swift.UInt = #line, method: Swift.String = #function)
  @objc @_disfavoredOverload public static func logDefault(logLevel: MoEngageCore.MoEngageLoggerType = .verbose, message: Swift.String, stackTrace: [Swift.String]? = nil, label: Swift.String? = nil, shouldLogContext: Swift.Bool = true, file: Swift.String = #file, line: Swift.UInt = #line, method: Swift.String = #function)
  @objc deinit
}
@objc public enum MoEngageLoggerType : Swift.Int, MoEngageCore.MoEngageDictionaryConvertible, Swift.CaseIterable {
  case verbose = 0
  case debug
  case info
  case warning
  case error
  case fatal
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [MoEngageCore.MoEngageLoggerType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [MoEngageCore.MoEngageLoggerType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct MoEngageMappingStorage<Value, MappedLocation> : MoEngageCore.MoEngageStorageLocation where MappedLocation : MoEngageCore.MoEngageStorageLocation {
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Value
  public func save(_ value: Value, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = Value
}
extension MoEngageCore.MoEngageStorageLocation {
  public func mapping<Result>(fromAction: @escaping (Self.Stored, MoEngageCore.MoEngageSDKInstance) -> Result, toAction: @escaping (Result, MoEngageCore.MoEngageSDKInstance) -> Self.Stored, writeCondition: @escaping (MoEngageCore.MoEngageSDKInstance) -> Swift.Bool = { _ in true }) -> MoEngageCore.MoEngageMappingStorage<Result, Self>
  public func mapping<Wrapped, Result>(fromAction: @escaping (Wrapped) -> Result, toAction: @escaping (Result) -> Wrapped, writeCondition: @escaping (MoEngageCore.MoEngageSDKInstance) -> Swift.Bool = { _ in true }) -> MoEngageCore.MoEngageMappingStorage<Result?, Self> where Self.Stored == Wrapped?
  public func onlyForDefaultInstance<Wrapped>() -> MoEngageCore.MoEngageMappingStorage<Self.Stored, Self> where Self.Stored == Wrapped?
}
public func integrationInfoToDictionary(_ integrationInfo: [MoEngageCore.MoEngageIntegrationInfo]) -> [[Swift.String : Swift.String]]?
@objc @_inheritsConvenienceInitializers open class MoEngageMessagingHandler : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func initializeMessaging(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func dataTrackingStatusUpdated(to status: Swift.Bool, for sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageMessagingManager : ObjectiveC.NSObject, MoEngageCore.MoEngageEnvironmentMigratable {
  @objc public static let sharedInstance: MoEngageCore.MoEngageMessagingManager
  @objc open func initializeMessaging(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func dataTrackingStatusUpdated(to status: Swift.Bool, for sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc @objcMembers final public class MoEngageModuleInfo : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let version: Swift.String
  @objc final public let metadata: [Swift.String : Any]
  @objc public init(name: Swift.String, version: Swift.String, metadata: [Swift.String : Any] = [:])
  @objc public static let sdkInfo: MoEngageCore.MoEngageModuleInfo
  @objc public static let securityInfo: MoEngageCore.MoEngageModuleInfo
  @objc deinit
}
extension Swift.Collection where Self.Element : MoEngageCore.MoEngageModuleInfo {
  public var payload: [Swift.String : Swift.String] {
    get
  }
}
@objc public protocol MoEngageModule {
  @objc func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
}
@dynamicMemberLookup public struct MoEngageModuleState<Spec> {
  public let sdkInstance: MoEngageCore.MoEngageSDKInstance
  public let spec: Spec
  public init(sdkInstance: MoEngageCore.MoEngageSDKInstance, spec: Spec)
  public subscript<Location>(dynamicMember keyPath: Swift.KeyPath<Spec, Location>) -> Location.Stored where Location : MoEngageCore.MoEngageReadOnlyStorageLocation {
    get
  }
  public subscript<Location>(dynamicMember keyPath: Swift.KeyPath<Spec, Location>) -> Location.Stored where Location : MoEngageCore.MoEngageStorageLocation {
    get
  }
  public subscript<Location>(dynamicMember keyPath: Swift.WritableKeyPath<Spec, Location>) -> Location.Stored where Location : MoEngageCore.MoEngageStorageLocation {
    get
    set
  }
  public subscript<Location, Input>(dynamicMember keyPath: Swift.KeyPath<Spec, (Input) -> Location>) -> (Input) -> Location.Stored where Location : MoEngageCore.MoEngageStorageLocation {
    get
  }
}
@objc public class MoEngageNetworkAuthorizationConfig : ObjectiveC.NSObject {
  @objc final public let isJwtEnbaled: Swift.Bool
  @objc public init(isJwtEnbaled: Swift.Bool)
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageNetworkAuthorizationConfig
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageNetworkConfiguration : ObjectiveC.NSObject {
  public static func getHost(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public struct MoEngageNetworkConstants {
  public struct APIRequestBodyKeys {
    public static let osType: Swift.String
  }
}
@objc public class MoEngageNetworkDataSecurityConfig : ObjectiveC.NSObject {
  @objc final public let isEncryptionEnabled: Swift.Bool
  @objc public var encryptionKeyDebug: Swift.String
  @objc public var encryptionKeyRelease: Swift.String
  @objc public init(isEncryptionEnabled: Swift.Bool, encryptionKeyDebug: Swift.String, encryptionKeyRelease: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageNetworkDataSecurityConfig
  @objc deinit
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func addNetworkEncryptionHandling() -> Self
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func addGZipCompressionProcessing() -> Self
}
@objc public enum MoEngageNetworkService : Swift.Int {
  case GetConfig = 0
  case Initialize
  case SendReports
  case InAppMetaFetch
  case InAppGetPayload
  case InAppGetTestPayload
  case InAppSendStats
  case InAppTemplatesPayload
  case InboxFetch
  case SendCategories
  case RealTimeTriggersFetch
  case CheckUserInSegment
  case GeofenceHit
  case GeofencesFetch
  case CardsFetch
  case CardsDelete
  case CardsUserActivity
  case CrashLake
  case register
  case unregister
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias completionHandler = ((Swift.Bool, [Swift.AnyHashable : Any]?) -> Swift.Void)
public typealias completionHandlerWithResponseCode = ((Swift.Bool, Swift.Int, [Swift.AnyHashable : Any]?) -> Swift.Void)
public typealias dataCompletionHandler = ((Swift.Bool, Foundation.Data?) -> Swift.Void)
public typealias richNotificationCompletionHandler = ((_ tempURL: Foundation.URL?) -> Swift.Void)
@objc public class MoEngageRequestBodyBuildResult : ObjectiveC.NSObject {
  final public let payload: [Swift.String : Any]
  final public let identities: [Swift.String : Swift.String]
  final public let uid: Swift.String?
  public init(payload: [Swift.String : Any], identities: [Swift.String : Swift.String], uid: Swift.String?)
  @objc deinit
}
public protocol MoEngageNetworkLoggerProtocol {
  func log(task: any MoEngageCore.MoEngageNetworkTask)
  func log(result: MoEngageCore.MoEngageNetworkRequestResult)
  func log(downloadResult: MoEngageCore.MoEngageNetworkDownloadRequestResult)
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func addDefaultLogger() -> Self
}
public protocol MoEngageNetworkPostProcessor {
  func postProcess(result: MoEngageCore.MoEngageNetworkRequestResult, task: any MoEngageCore.MoEngageNetworkTask, processed completion: @escaping (MoEngageCore.MoEngageNetworkPostProcessorResult) -> Swift.Void)
  func postProcess(downloadResult: MoEngageCore.MoEngageNetworkDownloadRequestResult, task: any MoEngageCore.MoEngageNetworkTask, processed completion: @escaping (MoEngageCore.MoEngageNetworkDownloadPostProcessorResult) -> Swift.Void)
}
public enum MoEngageNetworkPostProcessorResult {
  case skipped
  case transformed(MoEngageCore.MoEngageNetworkRequestResult)
  case failed(any Swift.Error)
}
public enum MoEngageNetworkDownloadPostProcessorResult {
  case skipped
  case transformed(MoEngageCore.MoEngageNetworkDownloadRequestResult)
  case failed(any Swift.Error)
}
public protocol MoEngageNetworkPreProcessor {
  func preProcess(task: any MoEngageCore.MoEngageNetworkTask, processed completion: @escaping (MoEngageCore.MoEngageNetworkPreProcessorResult) -> Swift.Void)
}
public enum MoEngageNetworkPreProcessorResult {
  case skipped
  case transformed(MoEngageCore.MoEngageNetworkRequest)
  case failed(any Swift.Error)
}
@_hasMissingDesignatedInitializers public class MoEngageNetworkRequest {
  public init?(sdkInstance: MoEngageCore.MoEngageSDKInstance, service: MoEngageCore.MoEngageNetworkService, additionalPathComponent: Swift.String? = nil, queryParams: [Swift.String : Swift.String] = [:], additionalHeaders: [Swift.String : Swift.String] = [:], body: Any = [:])
  public static func downloadRequest(forResource url: Foundation.URL, additionalHeaders: [Swift.String : Swift.String] = [:], sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageNetworkRequest
  public func updating(additionalHeaders: [Swift.String : Swift.String] = [:], bodyBuilder: ((_ current: Foundation.Data) throws -> Foundation.Data)? = nil) rethrows -> MoEngageCore.MoEngageNetworkRequest
  public func updating(authority: Swift.String) -> MoEngageCore.MoEngageNetworkRequest?
  @objc deinit
}
@objc public class MoEngageNetworkRequestConfig : ObjectiveC.NSObject {
  @objc final public let dataSecurityConfig: MoEngageCore.MoEngageNetworkDataSecurityConfig
  @objc final public let authorizationConfig: MoEngageCore.MoEngageNetworkAuthorizationConfig
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageNetworkRequestConfig
  @objc public init(authorizationConfig: MoEngageCore.MoEngageNetworkAuthorizationConfig, dataSecurityConfig: MoEngageCore.MoEngageNetworkDataSecurityConfig)
  @objc convenience public init(authorizationConfig: MoEngageCore.MoEngageNetworkAuthorizationConfig)
  @objc convenience public init(dataSecurityConfig: MoEngageCore.MoEngageNetworkDataSecurityConfig)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol MoEngageNetworkSessionDelegate {
  func didReceive(challenge: Foundation.URLAuthenticationChallenge, session: any MoEngageCore.MoEngageNetworkSessionProtocol, completionHandler: @escaping (MoEngageCore.MoEngageNetworkSessionAuthChallengeDisposition) -> Swift.Void)
}
public protocol MoEngageNetworkSessionProtocol : AnyObject {
  var sdkInstance: MoEngageCore.MoEngageSDKInstance! { get }
  var configuration: Foundation.URLSessionConfiguration { get }
  func add(delegates: [any MoEngageCore.MoEngageNetworkSessionDelegate])
  func add(preProcessors: [any MoEngageCore.MoEngageNetworkPreProcessor])
  func add(postProcessors: [any MoEngageCore.MoEngageNetworkPostProcessor])
  func dataTask(with request: MoEngageCore.MoEngageNetworkRequest, completionHandler: @escaping (MoEngageCore.MoEngageNetworkRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
  func downloadTask(with request: MoEngageCore.MoEngageNetworkRequest, completionHandler: @escaping (MoEngageCore.MoEngageNetworkDownloadRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
  func downloadTask(with url: Foundation.URL, completionHandler: @escaping (MoEngageCore.MoEngageNetworkDownloadRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
}
extension MoEngageCore.MoEngageNetworkSessionProtocol {
  public func dataTask(with url: Foundation.URL, completionHandler: @escaping (MoEngageCore.MoEngageNetworkRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
  public func downloadTask(with url: Foundation.URL, completionHandler: @escaping (MoEngageCore.MoEngageNetworkDownloadRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
}
public enum MoEngageNetworkSessionAuthChallengeDisposition {
  case useCredential(Foundation.URLCredential)
  case performDefaultHandling
  case cancelAuthenticationChallenge
  case rejectProtectionSpace
}
public enum MoEngageNetworkRequestResult {
  case success(Foundation.HTTPURLResponse, Foundation.Data, MoEngageCore.MoEngageNetworkRequest)
  case systemError(any Swift.Error, MoEngageCore.MoEngageNetworkRequest)
  case httpError(Foundation.HTTPURLResponse, Foundation.Data?, MoEngageCore.MoEngageNetworkRequest)
  case unknown(Foundation.URLResponse?, Foundation.Data?, MoEngageCore.MoEngageNetworkRequest)
}
public enum MoEngageNetworkDownloadRequestResult {
  case success(Foundation.HTTPURLResponse, Foundation.URL, MoEngageCore.MoEngageNetworkRequest)
  case systemError(any Swift.Error, MoEngageCore.MoEngageNetworkRequest)
  case httpError(Foundation.HTTPURLResponse, Foundation.URL?, MoEngageCore.MoEngageNetworkRequest)
  case unknown(Foundation.URLResponse?, Foundation.URL?, MoEngageCore.MoEngageNetworkRequest)
}
public protocol MoEngageNetworkTask : AnyObject {
  var isCacellable: Swift.Bool { get }
  var type: MoEngageCore.MoEngageNetworkTaskType { get }
  var request: MoEngageCore.MoEngageNetworkRequest { get }
  func add(logger: any MoEngageCore.MoEngageNetworkLoggerProtocol)
  func add(delegates: [any MoEngageCore.MoEngageNetworkTaskDelegate])
  func add(preProcessors: [any MoEngageCore.MoEngageNetworkPreProcessor])
  func add(postProcessors: [any MoEngageCore.MoEngageNetworkPostProcessor])
  func resume()
  func cancel()
}
public enum MoEngageNetworkTaskType {
  case data
  case download
  public static func == (a: MoEngageCore.MoEngageNetworkTaskType, b: MoEngageCore.MoEngageNetworkTaskType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MoEngageNetworkTaskDelegate {
  func urlSession(didCreateTask task: any MoEngageCore.MoEngageNetworkTask)
  func urlSession(didCompleteTask task: any MoEngageCore.MoEngageNetworkTask)
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func addStrictTimeout(tolerance: Foundation.TimeInterval = 1) -> any MoEngageCore.MoEngageNetworkTask
  @discardableResult
  public func addStrictTimeout(withInterval interval: Foundation.TimeInterval, tolerance: Foundation.TimeInterval = 1) -> any MoEngageCore.MoEngageNetworkTask
  @discardableResult
  public func addStrictTimeout(assumingTaskType type: MoEngageCore.MoEngageNetworkTaskType, tolerance: Foundation.TimeInterval = 1) -> any MoEngageCore.MoEngageNetworkTask
}
@_inheritsConvenienceInitializers @objc public class MoEngageNetworkUtils : ObjectiveC.NSObject {
  @objc public static func getQueryParams(sdkInstance: MoEngageCore.MoEngageSDKInstance, isV1ParamsRequired: Swift.Bool = false) -> [Swift.String : Any]
  public static func getTimeParams(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> [Swift.String : Any]
  public static func getAppVersionParamForExtensions() -> [Swift.String : Swift.String]
  public static func getSDKVersionParamForExtensions() -> [Swift.String : Swift.String]
  @objc public static func getDeviceUniqueID(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String?
  public static func isDeviceUniqueIDPresentInKeyChain(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MoEngagePartnerIntegrationType : Swift.Int, Swift.CustomStringConvertible {
  case none
  case segment
  case mParticleNative
  public var delayedInitialized: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MoEngagePlatformInfo {
  public let platformType: Swift.String
  public let osType: Swift.String?
  public func asRequestPayload() -> [Swift.String : Swift.String]
  public static func current() -> MoEngageCore.MoEngagePlatformInfo
}
public struct MoEngagePrimitiveDecoder {
  public struct Options {
    public var keyDecodingStrategy: MoEngageCore.MoEngagePrimitiveDecoder.KeyDecodingStrategy
    public init()
  }
  public enum KeyDecodingStrategy {
    case useDefaultKeys
    case convertFromSnakeCase
    case convertFromUpperCamelCase
    case custom((_ codingPath: [any Swift.CodingKey], _ key: Swift.String) -> Swift.String)
  }
  public var userInfo: [Swift.CodingUserInfoKey : Any]
  public var options: MoEngageCore.MoEngagePrimitiveDecoder.Options
  public init(userInfo: [Swift.CodingUserInfoKey : Any] = [:], options: MoEngageCore.MoEngagePrimitiveDecoder.Options = Options())
  public func decode<T>(_ type: T.Type, from value: Any?) throws -> T where T : Swift.Decodable
}
public struct MoEngagePrimitiveEncoder {
  public struct Options {
    public var keyEncodingStrategy: MoEngageCore.MoEngagePrimitiveEncoder.KeyEncodingStrategy
    public init()
  }
  public enum KeyEncodingStrategy {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToUpperCamelCase
    case custom((_ codingPath: [any Swift.CodingKey], _ key: Swift.String) -> Swift.String)
  }
  public var userInfo: [Swift.CodingUserInfoKey : Any]
  public var options: MoEngageCore.MoEngagePrimitiveEncoder.Options
  public init(userInfo: [Swift.CodingUserInfoKey : Any] = [:], options: MoEngageCore.MoEngagePrimitiveEncoder.Options = Options())
  public func encode<T>(_ value: T) throws -> Any? where T : Swift.Encodable
}
@objc public class MoEngageProperties : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(withAttributes attributesDict: [Swift.String : Any]? = nil)
  @objc public func updateAttributes(withPluginPayload payloadDict: [Swift.String : Any]?)
  @objc public func addAttribute(_ attrVal: Any?, withName attrName: Swift.String)
  @objc public func addLocationAttribute(_ attrVal: MoEngageCore.MoEngageGeoLocation, withName attrName: Swift.String)
  @objc public func addDateAttribute(_ attrVal: Foundation.Date, withName attrName: Swift.String)
  @objc public func addDateISOStringAttribute(_ dateString: Swift.String, withName attrName: Swift.String)
  @objc public func addDateEpochAttribute(_ epoch: Swift.Double, withName attrName: Swift.String)
  @objc public func setNonInteractive()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol MoEngageController {
  var sdkInstance: MoEngageCore.MoEngageSDKInstance { get }
}
public protocol MoEngageControllerProvider {
  associatedtype Controller
  static func getController(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Self.Controller
  static func removeController(forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
}
public struct MoEngageQueuedControllerProvider<T> where T : MoEngageCore.MoEngageControllerProvider {
  public static func perform(onControllerWithAppId appId: Swift.String?, completion: @escaping (T.Controller?) -> Swift.Void)
  public static func performAssumingGlobalQueue(onControllerWithAppId appId: Swift.String?, completion: @escaping (T.Controller?) -> Swift.Void)
}
extension MoEngageCore.MoEngageQueuedControllerProvider where T.Controller : MoEngageCore.MoEngageController {
  public static func performForAllControllers(_ action: @escaping (T.Controller) -> Swift.Void)
  public static func performAssumingGlobalQueueForAllControllers(actionForEach action: @escaping (T.Controller) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class MoEngageQueueManager {
  final public let operationQueue: Foundation.OperationQueue
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MoEngageRealTimeTriggerDelegate : ObjectiveC.NSObject, MoEngageCore.MoEngageModule {
  @objc required override dynamic public init()
  @objc open func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  open func trackEvent(eventName: Swift.String, eventAttribute: [Swift.String : Any], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func initializeRTT(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationWillBecomeInActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageRealTimeTriggerManager : ObjectiveC.NSObject, MoEngageCore.MoEngageEnvironmentMigratable {
  @objc public static let sharedInstance: MoEngageCore.MoEngageRealTimeTriggerManager
  public func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  public func trackEvent(eventName: Swift.String, eventAttribute: [Swift.String : Any], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func initializeRTT(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationWillBecomeInActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateEnvironment(forSDK sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func deinitialize(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public class MoEngageRegistrationData : ObjectiveC.NSObject {
  @objc final public let accountMeta: MoEngageCore.MoEngageAccountMeta
  @objc final public let type: MoEngageCore.MoEngageRegistrationType
  @objc final public let state: MoEngageCore.MoEngageRegistrationState
  @objc final public let result: MoEngageCore.MoEngageRegistrationResult
  public init(accountMeta: MoEngageCore.MoEngageAccountMeta, type: MoEngageCore.MoEngageRegistrationType, state: MoEngageCore.MoEngageRegistrationState, result: MoEngageCore.MoEngageRegistrationResult)
  @objc deinit
}
@objc public enum MoEngageRegistrationResult : Swift.Int {
  case success
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MoEngageRegistrationState : Swift.Int {
  case registered
  case unregistered
  case flowNotEnabled
  case userNotRegistered
  case invalidData
  case sdkOrAccountDisabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MoEngageRegistrationType : Swift.Int {
  case register
  case unregister
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MoEngageRemoteAnalyticsConfig : Swift.Hashable {
  public let sessionInActiveDuration: Swift.Int
  public let sourceIdentifiers: Swift.Set<Swift.String>
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageRemoteAnalyticsConfig, b: MoEngageCore.MoEngageRemoteAnalyticsConfig) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MoEngageRemoteConfiguration : MoEngageCore.MoEngageDataModel, MoEngageCore.MoEngageDictionaryConvertible, Swift.Hashable {
  public static var flushDuration: Dispatch.DispatchTimeInterval {
    get
  }
  public let isAppEnabled: Swift.Bool
  public let moduleStatus: MoEngageCore.MoEngageRemoteModuleStatus
  public var dataTrackingConfig: MoEngageCore.MoEngageRemoteDataTrackingConfig {
    get
  }
  public let analyticsConfig: MoEngageCore.MoEngageRemoteAnalyticsConfig
  public let rttConfig: MoEngageCore.MoEngageRemoteRealTimeTriggerConfig
  public let inAppConfig: MoEngageCore.MoEngageRemoteInAppConfig
  public let logConfig: MoEngageCore.MoEngageRemoteLogConfig
  public let remoteNetworkConfig: MoEngageCore.MoEngageRemoteNetworkConfig
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageRemoteConfiguration, b: MoEngageCore.MoEngageRemoteConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension MoEngageCore.MoEngageRemoteConfiguration {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MoEngageRemoteDataTrackingConfig : Swift.Hashable {
  public let isPeriodicSyncEnabled: Swift.Bool
  public let periodicSyncInterval: Swift.Int
  public let blackListedEvents: Swift.Set<Swift.String>
  public let blackListedUserAttributes: Swift.Set<Swift.String>
  public let blackListedUniqueIds: Swift.Set<Swift.String>
  public let eventBatchCount: Swift.Int
  public let userAttributeCacheDuration: Swift.Int
  public var flushEvents: Swift.Set<Swift.String>
  public let userIdentities: Swift.Set<Swift.String>
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageRemoteDataTrackingConfig, b: MoEngageCore.MoEngageRemoteDataTrackingConfig) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MoEngageRemoteInAppConfig : Swift.Hashable {
  public let isStatsEnabled: Swift.Bool
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageRemoteInAppConfig, b: MoEngageCore.MoEngageRemoteInAppConfig) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MoEngageRemoteLogConfig : Swift.Hashable {
  public let isLoggingEnabled: Swift.Bool
  public let loglevel: MoEngageCore.MoEngageLoggerType?
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageRemoteLogConfig, b: MoEngageCore.MoEngageRemoteLogConfig) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MoEngageRemoteModuleStatus : Swift.Hashable {
  public let isInAppEnabled: Swift.Bool
  public let isInboxEnabled: Swift.Bool
  public let isGeofenceEnabled: Swift.Bool
  public let isRttEnabled: Swift.Bool
  public let isCardEnabled: Swift.Bool
  public let isConditionEvaluatorKMMEnabled: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageRemoteModuleStatus, b: MoEngageCore.MoEngageRemoteModuleStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MoEngageRemoteNetworkConfig : MoEngageCore.MoEngageStringConvertibleModel, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageRemoteNetworkConfig, b: MoEngageCore.MoEngageRemoteNetworkConfig) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MoEngageRemoteRealTimeTriggerConfig : Swift.Hashable {
  public let syncInterval: Swift.Int
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageRemoteRealTimeTriggerConfig, b: MoEngageCore.MoEngageRemoteRealTimeTriggerConfig) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func saveReportsRequestInfoWithComponents() -> any MoEngageCore.MoEngageNetworkTask
}
@objc @_inheritsConvenienceInitializers open class MoEngageRichNotificationDelegate : ObjectiveC.NSObject, MoEngageCore.MoEngageModule {
  @objc required override dynamic public init()
  @objc open func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  open func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageRichNotificationManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageRichNotificationManager
  public var richNotificationDelegateHandler: MoEngageCore.MoEngageRichNotificationDelegate? {
    get
  }
  public func getInfo(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageModuleInfo?
  public func identitiesUpdated(from old: [Swift.String : Swift.String], to new: [Swift.String : Swift.String], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageSDKAnalytics : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageSDKAnalytics
  @objc public func trackSDKVersion()
  @objc public func updateSessionSource(withPushPayload payload: [Swift.AnyHashable : Any], fromMoEngage isMoEngagePush: Swift.Bool)
  @objc public func updateSessionSource(withURL url: Foundation.URL)
  @objc public func pushTokenUpdated(appId: Swift.String)
  @objc public func appStatus(_ appStatus: MoEngageCore.MoEngageAppStatus, forAppID appID: Swift.String? = nil)
  @objc public func appStatus(_ appStatus: MoEngageCore.MoEngageAppStatus)
  @objc public func trackEvent(_ name: Swift.String, withProperties properties: MoEngageCore.MoEngageProperties? = nil)
  @objc public func trackEvent(_ name: Swift.String, withProperties properties: MoEngageCore.MoEngageProperties? = nil, forAppID appID: Swift.String? = nil)
  @objc public func flush(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func flush()
  @objc public func flush(forAppID appID: Swift.String? = nil)
  @objc public func flush(withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func flushRichNotificationEvents(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func setUserAttribute(_ value: Any?, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttribute(_ value: Any?, withAttributeName attributeName: Swift.String)
  @objc public func setUserAttributeEpochTime(_ dateEpoch: Swift.Double, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeEpochTime(_ dateEpoch: Swift.Double, withAttributeName attributeName: Swift.String)
  @objc public func setUserAttributeDate(_ date: Foundation.Date, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeDate(_ date: Foundation.Date, withAttributeName attributeName: Swift.String)
  @objc public func setUserAttributeISODate(_ dateString: Swift.String, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeISODate(_ dateString: Swift.String, withAttributeName attributeName: Swift.String)
  @objc public func setLocation(_ location: MoEngageCore.MoEngageGeoLocation, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setLocation(_ location: MoEngageCore.MoEngageGeoLocation, withAttributeName attributeName: Swift.String)
  @objc public func setAlias(_ alias: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setAlias(_ alias: Swift.String)
  @objc public func setUniqueID(_ uniqueID: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUniqueID(_ uniqueID: Swift.String)
  @objc public func setEmailID(_ emailID: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setEmailID(_ emailID: Swift.String)
  @objc public func setName(_ userName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setName(_ userName: Swift.String)
  @objc public func setFirstName(_ firstName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setFirstName(_ firstName: Swift.String)
  @objc public func setLastName(_ lastName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setLastName(_ lastName: Swift.String)
  @objc public func setMobileNumber(_ mobileNum: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setMobileNumber(_ mobileNum: Swift.String)
  @objc public func setGender(_ gender: MoEngageCore.MoEngageUserGender, forAppID appID: Swift.String? = nil)
  @objc public func setGender(_ gender: MoEngageCore.MoEngageUserGender)
  @objc public func setDateOfBirth(_ dob: Foundation.Date, forAppID appID: Swift.String? = nil)
  @objc public func setDateOfBirth(_ dob: Foundation.Date)
  @objc public func setDateOfBirthInISO(_ dateString: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setDateOfBirthInISO(_ dateString: Swift.String)
  @objc public func setLocation(_ location: MoEngageCore.MoEngageGeoLocation, forAppID appID: Swift.String? = nil)
  @objc public func setLocation(_ location: MoEngageCore.MoEngageGeoLocation)
  @objc public func trackUserPushPreference(_ isPushEnabled: Swift.Bool, forAppID appID: Swift.String? = nil)
  @objc public func trackLocale()
  @objc public func trackLocale(forAppID appID: Swift.String? = nil)
  @objc public func resetUser(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func resetUser()
  @objc public func resetUser(withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func resetUser(forAppID appID: Swift.String? = nil)
  @objc public func enableDataTracking(forAppID appID: Swift.String? = nil)
  @objc public func enableDataTracking()
  @objc public func disableDataTracking(forAppID appID: Swift.String? = nil)
  @objc public func disableDataTracking()
  @objc public func enableIDFATracking(forAppID appID: Swift.String? = nil)
  @objc public func enableIDFATracking()
  @objc public func disableIDFATracking(forAppID appID: Swift.String? = nil)
  @objc public func disableIDFATracking()
  @objc public func enableIDFVTracking(forAppID appID: Swift.String? = nil)
  @objc public func enableIDFVTracking()
  @objc public func disableIDFVTracking(forAppID appID: Swift.String? = nil)
  @objc public func disableIDFVTracking()
  @objc public func processURL(_ url: Foundation.URL?)
  @objc public func setDelegate(delegate: any MoEngageCore.MoEngageAnalyticsCallBack, forAppID appID: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension MoEngageCore.MoEngageSDKAnalytics {
  @objc dynamic public func identifyUser(identities: [Swift.String : Swift.String], workspaceId: Swift.String? = nil)
  @objc dynamic public func identifyUser(identity: Swift.String, workspaceId: Swift.String? = nil)
  @objc dynamic public func getUserIdentities(workspaceId: Swift.String? = nil, completion: @escaping ([Swift.String : Swift.String]) -> Swift.Void)
}
public struct MoEngageSDKCommonData : MoEngageCore.MoEngageDataModel, MoEngageCore.MoEngageInitializableValue, Swift.Hashable {
  public static var flushDuration: Dispatch.DispatchTimeInterval {
    get
  }
  public var trackedSDKVersion: Swift.String?
  public var prevSDKVersion: Swift.String?
  public var trackedReInstall: Swift.Bool?
  public var isFirstAppOpen: Swift.Bool?
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageSDKCommonData, b: MoEngageCore.MoEngageSDKCommonData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKConfig : ObjectiveC.NSObject {
  @objc public var appId: Swift.String {
    get
  }
  @objc public var moeDataCenter: MoEngageCore.MoEngageDataCenter
  @objc public var appGroupID: Swift.String
  @objc public var analyticsPeriodicFlushDuration: Swift.Int
  @objc public var analyticsDisablePeriodicFlush: Swift.Bool
  @objc public var formattedAppId: Swift.String {
    get
  }
  @objc public var isDefaultInstance: Swift.Bool {
    get
  }
  @objc public var isTestEnvironment: Swift.Bool {
    get
  }
  public var partnerIntegrationType: MoEngageCore.MoEngagePartnerIntegrationType?
  @objc public var inAppConfig: MoEngageCore.MoEngageInAppConfig
  @objc public var storageConfig: MoEngageCore.MoEngageStorageConfig
  @objc public var keyChainConfig: MoEngageCore.MoEngageKeyChainConfig
  @objc public var userRegistrationConfig: MoEngageCore.MoEngageUserRegistrationConfig
  @objc public var networkConfig: MoEngageCore.MoEngageNetworkRequestConfig
  @objc public var consoleLogConfig: MoEngageCore.MoEngageConsoleLogConfig
  @objc public init(appId: Swift.String, dataCenter: MoEngageCore.MoEngageDataCenter)
  @objc public func updateConfigForTestEnvironment()
  @objc public func setPartnerIntegrationType(integrationType: MoEngageCore.MoEngagePartnerIntegrationType)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public typealias UserRegistrationHandler = (MoEngageCore.MoEngageRegistrationData) -> Swift.Void
public typealias UserRegistrationStatusHandler = (MoEngageCore.MoEngageUserRegistrationStatus) -> Swift.Void
public typealias UserInfoHandler = (MoEngageCore.MoEngageUserInformation) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKCore : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageSDKCore
  @objc public func registerUser(data: Swift.String, completionHandler: @escaping MoEngageCore.UserRegistrationHandler)
  @objc public func registerUser(data: Swift.String, appId: Swift.String? = nil, completionHandler: @escaping MoEngageCore.UserRegistrationHandler)
  @objc public func unregisterUser(data: Swift.String, completionHandler: @escaping MoEngageCore.UserRegistrationHandler)
  @objc public func unregisterUser(data: Swift.String, appId: Swift.String? = nil, completionHandler: @escaping MoEngageCore.UserRegistrationHandler)
  @objc public func getUserRegistrationStatus(completionHandler: @escaping MoEngageCore.UserRegistrationStatusHandler)
  @objc public func getUserRegistrationStatus(forAppId appId: Swift.String? = nil, completionHandler: @escaping MoEngageCore.UserRegistrationStatusHandler)
  @objc public func getMoEngageDeviceId(completionHandler: @escaping MoEngageCore.UserInfoHandler)
  @objc public func getMoEngageDeviceId(appId: Swift.String? = nil, completionHandler: @escaping MoEngageCore.UserInfoHandler)
  @objc public func enableAllLogs()
  @objc public func disableAllLogs()
  @objc public func disableIntegrationValidator()
  @objc deinit
}
public struct MoEngageSDKCoreData : MoEngageCore.MoEngageDataModel, MoEngageCore.MoEngageInitializableValue, Swift.Hashable {
  public static var flushDuration: Dispatch.DispatchTimeInterval {
    get
  }
  public var appVersionAppStatus: Swift.String?
  public var hasDeviceAddFailed: Swift.Bool?
  public var geofenceEnabled: Swift.Bool?
  public var installRegistered: Swift.Bool?
  public var deviceTypeTracked: Swift.Bool?
  public var trackedIDFA: Swift.String?
  public var integratedModuleTrackedVersion: Swift.String?
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageSDKCoreData, b: MoEngageCore.MoEngageSDKCoreData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct MoEngageSDKCoreExtensionData : MoEngageCore.MoEngageDataModel, MoEngageCore.MoEngageInitializableValue, Swift.Hashable {
  public static var flushDuration: Dispatch.DispatchTimeInterval {
    get
  }
  public var appVersionAppStatus: Swift.String?
  public var hasDeviceAddFailed: Swift.Bool?
  public var geofenceEnabled: Swift.Bool?
  public var installRegistered: Swift.Bool?
  public var deviceTypeTracked: Swift.Bool?
  public var trackedIDFA: Swift.String?
  public var integratedModuleTrackedVersion: Swift.String?
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: MoEngageCore.MoEngageSDKCoreExtensionData, b: MoEngageCore.MoEngageSDKCoreExtensionData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@objc public class MoEngageSDKInstance : ObjectiveC.NSObject {
  @objc public var sdkConfig: MoEngageCore.MoEngageSDKConfig {
    get
  }
  @objc final public let sdkQueue: Dispatch.DispatchQueue
  @objc final public let logger: MoEngageCore.MoEngageLogger
  final public let queueManager: MoEngageCore.MoEngageQueueManager
  public var session: any MoEngageCore.MoEngageNetworkSessionProtocol {
    get
  }
  public init(withSDKConfig config: MoEngageCore.MoEngageSDKConfig, sdkQueue: Dispatch.DispatchQueue? = nil)
  public func getRemoteConfig() -> MoEngageCore.MoEngageRemoteConfiguration
  @objc deinit
}
public struct MoEngageSDKInstanceProperty<Value> : MoEngageCore.MoEngageStorageLocation where Value : MoEngageCore.MoEngageResettableValue {
  public init(keyPath: Swift.ReferenceWritableKeyPath<MoEngageCore.MoEngageSDKInstance, Value>)
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Value
  public func save(_ value: Value, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = Value
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKInstanceProvider : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageSDKInstanceProvider
  public var sdkInstanceCache: [Swift.String : MoEngageCore.MoEngageSDKInstance] {
    get
  }
  @objc public func getSdkInstance(forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig) -> MoEngageCore.MoEngageSDKInstance?
  @objc public func getSdkInstance(_ instanceId: Swift.String?) -> MoEngageCore.MoEngageSDKInstance?
  @objc public func getDefaultSdkInstance() -> MoEngageCore.MoEngageSDKInstance?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageSDKAppPersonalization : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageSDKAppPersonalization
  @objc public func experienceShown(experienceAttribute: [Swift.String : Any], forWorkspaceId workspaceId: Swift.String? = nil)
  @objc public func experienceShown(experienceAttributes: [[Swift.String : Any]], forWorkspaceId workspaceId: Swift.String? = nil)
  @objc public func experienceShown(experienceAttribute: [Swift.String : Any])
  @objc public func experienceShown(experienceAttributes: [[Swift.String : Any]])
  @objc public func experienceClicked(experienceAttribute: [Swift.String : Any], forWorkspaceId workspaceId: Swift.String? = nil)
  @objc public func experienceClicked(experienceAttributes: [[Swift.String : Any]], forWorkspaceId workspaceId: Swift.String? = nil)
  @objc public func experienceClicked(experienceAttribute: [Swift.String : Any])
  @objc public func experienceClicked(experienceAttributes: [[Swift.String : Any]])
  @objc public func offeringShown(offeringAttributes: [Swift.String : Any], forWorkspaceId workspaceId: Swift.String? = nil)
  @objc public func offeringShown(offeringAttributes: [Swift.String : Any])
  @objc public func offeringClicked(offeringAttributes: [Swift.String : Any], withExperienceAttributes experienceAttributes: [Swift.String : Any]? = nil, forWorkspaceId workspaceId: Swift.String? = nil)
  @objc public func offeringClicked(offeringAttributes: [Swift.String : Any], withExperienceAttributes experienceAttributes: [Swift.String : Any])
  @objc public func offeringClicked(offeringAttributes: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MoEngageSDKState : Swift.Int {
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MoEngageSDKStateHelper : ObjectiveC.NSObject {
  @objc public static func isSDKEnabled(appID: Swift.String? = nil, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public static func isSDKInitialized(appID: Swift.String? = nil, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public static func isSDKInitialized(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MoEngageStorageConfig : ObjectiveC.NSObject {
  @objc final public let encryptionConfig: MoEngageCore.MoEngageStorageEncryptionConfig
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageStorageConfig
  @objc public init(encryptionConfig: MoEngageCore.MoEngageStorageEncryptionConfig)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class MoEngageStorageEncryptionConfig : ObjectiveC.NSObject {
  @objc public var isEncryptionEnabled: Swift.Bool
  @objc public init(isEncryptionEnabled: Swift.Bool)
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageStorageEncryptionConfig
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol MoEngageReadOnlyStorageLocation {
  associatedtype Stored
  func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Self.Stored
}
public struct AnyMoEngageReadOnlyStorageLocation<Stored> : MoEngageCore.MoEngageReadOnlyStorageLocation {
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Stored
}
public protocol MoEngageStorageLocation : MoEngageCore.MoEngageReadOnlyStorageLocation {
  func save(_ value: Self.Stored, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
}
public struct AnyMoEngageStorageLocation<Stored> : MoEngageCore.MoEngageStorageLocation {
  public init(readAction: @escaping (MoEngageCore.MoEngageSDKInstance) -> Stored, saveAction: @escaping (Stored, MoEngageCore.MoEngageSDKInstance) -> Swift.Void, removeAction: @escaping (MoEngageCore.MoEngageSDKInstance) -> Swift.Void)
  public init(readAction: @escaping (MoEngageCore.MoEngageSDKInstance) -> Stored)
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Stored
  public func save(_ value: Stored, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
}
extension MoEngageCore.MoEngageStorageLocation {
  public func makeReadOnly() -> MoEngageCore.AnyMoEngageReadOnlyStorageLocation<Self.Stored>
}
public struct MoEngageStorageScope : Swift.OptionSet {
  public let rawValue: Swift.UInt8
  public init(rawValue: Swift.UInt8)
  public static let common: MoEngageCore.MoEngageStorageScope
  public static let group: MoEngageCore.MoEngageStorageScope
  public static let instance: MoEngageCore.MoEngageStorageScope
  public typealias ArrayLiteralElement = MoEngageCore.MoEngageStorageScope
  public typealias Element = MoEngageCore.MoEngageStorageScope
  public typealias RawValue = Swift.UInt8
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageStorageProvider : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageStorageProvider
  @objc deinit
}
final public class MoEngageSynchronizationContext : Swift.ExpressibleByStringLiteral {
  public init(name: Swift.String)
  convenience public init(stringLiteral value: Swift.StringLiteralType)
  final public func execute<T>(action: () -> T) -> T
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageTokenManagerFactory {
  public static let shared: MoEngageCore.MoEngageTokenManagerFactory
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
public struct MoEngageTwoWayStorage<Instance, Group> : MoEngageCore.MoEngageStorageLocation where Instance : MoEngageCore.MoEngageStorageLocation, Group : MoEngageCore.MoEngageStorageLocation, Instance.Stored == Group.Stored {
  public init(instance: Instance, group: Group, aggregateData: @escaping (_ instanceValue: Instance.Stored, _ groupValue: Group.Stored) -> Instance.Stored)
  public init<Wrapped>(instance: Instance, group: Group) where Instance.Stored == Wrapped?, Group.Stored == Wrapped?
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Instance.Stored
  public func save(_ value: Instance.Stored, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public typealias Stored = Instance.Stored
}
public struct MoEngageUserDefaultStorage<Value> : MoEngageCore.MoEngageStorageLocation {
  public init(key: Swift.String, nestedPath: [Swift.String] = [], scope: MoEngageCore.MoEngageUserDefaultStorage<Value>.Scope)
  public init(key: Swift.String, nestedPath: [Swift.String] = [], scope: MoEngageCore.MoEngageStorageScope)
  public func load(fromInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Value?
  public func save(_ value: Value?, inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func remove(inInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public enum Scope {
    case app
    case sdk(MoEngageCore.MoEngageStorageScope)
  }
  public typealias Stored = Value?
}
@objc public class MoEngageUserInformation : ObjectiveC.NSObject {
  @objc final public let accountMeta: MoEngageCore.MoEngageAccountMeta
  @objc final public let uniqueId: Swift.String?
  @objc public init(accountMeta: MoEngageCore.MoEngageAccountMeta, uniqueId: Swift.String? = nil)
  @objc deinit
}
@objc public class MoEngageUserRegistrationConfig : ObjectiveC.NSObject {
  @objc public var isUserRegistrationEnabled: Swift.Bool
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageUserRegistrationConfig
  @objc public init(isUserRegistrationEnabled: Swift.Bool)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class MoEngageUserRegistrationStatus : ObjectiveC.NSObject {
  @objc final public let accountMeta: MoEngageCore.MoEngageAccountMeta
  @objc public var isUserRegistered: Swift.Bool
  @objc public init(accountMeta: MoEngageCore.MoEngageAccountMeta, isUserRegistered: Swift.Bool)
  @objc deinit
}
@objc public protocol MoEngageGifDelegate {
  @objc optional func gifDidStart(sender: UIKit.UIImageView)
  @objc optional func gifDidLoop(sender: UIKit.UIImageView)
  @objc optional func gifDidStop(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFinish(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFail(sender: UIKit.UIImageView, url: Foundation.URL, error: (any Swift.Error)?)
}
extension MoEngageCore.MoEngageUserGender : Swift.Equatable {}
extension MoEngageCore.MoEngageUserGender : Swift.Hashable {}
extension MoEngageCore.MoEngageUserGender : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageAppStatus : Swift.Equatable {}
extension MoEngageCore.MoEngageAppStatus : Swift.Hashable {}
extension MoEngageCore.MoEngageAppStatus : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageAsyncOperation.State : Swift.Equatable {}
extension MoEngageCore.MoEngageAsyncOperation.State : Swift.Hashable {}
extension MoEngageCore.MoEngageAsyncOperation.State : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageInAppWhiteList : Swift.Equatable {}
extension MoEngageCore.MoEngageInAppWhiteList : Swift.Hashable {}
extension MoEngageCore.MoEngageInAppWhiteList : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageExceptions : Swift.Equatable {}
extension MoEngageCore.MoEngageExceptions : Swift.Hashable {}
extension MoEngageCore.MoEngageDataCenter : Swift.Equatable {}
extension MoEngageCore.MoEngageDataCenter : Swift.Hashable {}
extension MoEngageCore.MoEngageDataCenter : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageInMemoryStorage.Scope : Swift.Equatable {}
extension MoEngageCore.MoEngageInMemoryStorage.Scope : Swift.Hashable {}
extension MoEngageCore.MoEngageInMemoryStorage.Scope : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageLoggerType : Swift.Equatable {}
extension MoEngageCore.MoEngageLoggerType : Swift.Hashable {}
extension MoEngageCore.MoEngageLoggerType : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageNetworkService : Swift.Equatable {}
extension MoEngageCore.MoEngageNetworkService : Swift.Hashable {}
extension MoEngageCore.MoEngageNetworkService : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageNetworkTaskType : Swift.Equatable {}
extension MoEngageCore.MoEngageNetworkTaskType : Swift.Hashable {}
extension MoEngageCore.MoEngagePartnerIntegrationType : Swift.Equatable {}
extension MoEngageCore.MoEngagePartnerIntegrationType : Swift.Hashable {}
extension MoEngageCore.MoEngagePartnerIntegrationType : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageRegistrationResult : Swift.Equatable {}
extension MoEngageCore.MoEngageRegistrationResult : Swift.Hashable {}
extension MoEngageCore.MoEngageRegistrationResult : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageRegistrationState : Swift.Equatable {}
extension MoEngageCore.MoEngageRegistrationState : Swift.Hashable {}
extension MoEngageCore.MoEngageRegistrationState : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageRegistrationType : Swift.Equatable {}
extension MoEngageCore.MoEngageRegistrationType : Swift.Hashable {}
extension MoEngageCore.MoEngageRegistrationType : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageSDKState : Swift.Equatable {}
extension MoEngageCore.MoEngageSDKState : Swift.Hashable {}
extension MoEngageCore.MoEngageSDKState : Swift.RawRepresentable {}
