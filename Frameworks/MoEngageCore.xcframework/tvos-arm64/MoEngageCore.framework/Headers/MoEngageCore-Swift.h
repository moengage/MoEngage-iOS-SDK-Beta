#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef MOENGAGECORE_SWIFT_H
#define MOENGAGECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoEngageCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Meta-data related to your MoEngage account.
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageAccountMeta")
@interface MoEngageAccountMeta : NSObject
/// Account identifier, APP ID on the MoEngage Dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull appID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create an instance of <code>MoEngageAccountMeta</code>
/// \param instanceID MoEngage account identifier.
/// :nodoc:
///
- (nonnull instancetype)initWithInstanceID:(NSString * _Nonnull)instanceID OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Protocol for all Analytics related Events
SWIFT_PROTOCOL("_TtP12MoEngageCore25MoEngageAnalyticsCallBack_")
@protocol MoEngageAnalyticsCallBack
@optional
/// Callback received when Force Logout is done
/// \param accountMeta MoEngageAccount information
///
- (void)didLogOutFrom:(MoEngageAccountMeta * _Nonnull)accountMeta;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore25MoEngageAnalyticsDelegate")
@interface MoEngageAnalyticsDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

SWIFT_PROTOCOL("_TtP12MoEngageCore41MoEngageAppDelegateAnalyticsProxyProtocol_")
@protocol MoEngageAppDelegateAnalyticsProxyProtocol
- (void)handleOpenURL:(NSURL * _Nonnull)url;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore32MoEngageAnalyticsDelegateHandler")
@interface MoEngageAnalyticsDelegateHandler : MoEngageAnalyticsDelegate <MoEngageAppDelegateAnalyticsProxyProtocol>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)handleOpenURL:(NSURL * _Nonnull)url;
@end

@class MoEngageSDKInstance;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageAnalyticsHandler")
@interface MoEngageAnalyticsHandler : NSObject
/// Set boolean user attribute
/// \param value Boolean value i.e True/False
///
/// \param attributeName attribute name
///
/// \param appID MoEngage Account Identifier
///
+ (void)setUserAttributeBool:(BOOL)value withAttributeName:(NSString * _Nonnull)attributeName forAppID:(NSString * _Nullable)appID;
/// Update push opt-in device attribute status.
/// \param status The updated status.
///
/// \param appId The application identifier update is perfomed for.
///
+ (void)pushOptInStatusUpdatedTo:(BOOL)status forSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Update provisional push opt-in device attribute status.
/// \param status The updated status.
///
/// \param appId The application identifier update is perfomed for.
///
+ (void)pushProvisionalStatusUpdatedTo:(BOOL)status forSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageAnalyticsManager")
@interface MoEngageAnalyticsManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageAnalyticsManager * _Nonnull sharedInstance;)
+ (MoEngageAnalyticsManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeAnalyticsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)moengageSDKStateUpdatedWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidBecomeActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillResignActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterBackgroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)resetDataAfterUnRegistrationWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)syncExistingDataBeforeUnRegisterationWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance withCompletionBlock:(void (^ _Nullable)(BOOL))completionBlock;
/// Handle callback for environment change.
/// \param sdkInstance The instance to migrate.
///
- (void)migrateEnvironmentForSDK:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end


@class NSData;
@class UNNotification;
@class UNNotificationResponse;

SWIFT_PROTOCOL("_TtP12MoEngageCore41MoEngageAppDelegateMessagingProxyProtocol_")
@protocol MoEngageAppDelegateMessagingProxyProtocol
- (void)applicationDidRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nullable)deviceToken;
- (void)applicationDidFailToRegisterForRemoteNotificationsWithError:(NSError * _Nullable)error;
- (void)applicationDidReceiveRemoteNotification:(NSDictionary * _Nullable)userInfo;
- (void)userNotificationCenterWillPresent:(UNNotification * _Nullable)notification;
- (void)userNotificationCenterDidReceive:(UNNotificationResponse * _Nullable)response SWIFT_AVAILABILITY(tvos,unavailable);
@end

/// Enum to set app status
typedef SWIFT_ENUM(NSInteger, MoEngageAppStatus, open) {
/// App Status to indicate fresh install
  MoEngageAppStatusInstall = 0,
/// App Status to indicate Update.
  MoEngageAppStatusUpdate = 1,
};


SWIFT_CLASS("_TtC12MoEngageCore22MoEngageAsyncOperation")
@interface MoEngageAsyncOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)start;
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MoEngageModuleInfo;

/// A type representing a MoEngage module.
/// :nodoc:
SWIFT_PROTOCOL("_TtP12MoEngageCore14MoEngageModule_")
@protocol MoEngageModule
/// The info for the module.
///
/// returns:
/// The in fo data.
- (MoEngageModuleInfo * _Nullable)getInfoWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageCardsHandler")
@interface MoEngageCardsHandler : NSObject <MoEngageModule>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (MoEngageModuleInfo * _Nullable)getInfoWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageCardsManager")
@interface MoEngageCardsManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCardsManager * _Nonnull sharedInstance;)
+ (MoEngageCardsManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeCardsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillBecomeInActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Handle callback for environment change.
/// \param sdkInstance The instance to migrate.
///
- (void)migrateEnvironmentForSDK:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageConfigDelegate")
@interface MoEngageConfigDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageConfigDelegateHandler")
@interface MoEngageConfigDelegateHandler : MoEngageConfigDelegate
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MoEngageLoggerType : NSInteger;

/// Model class to enable console logging and logLevel
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageConsoleLogConfig")
@interface MoEngageConsoleLogConfig : NSObject
/// Bool to enable/disable console logging
@property (nonatomic, readonly) BOOL isLoggingEnabled;
/// MoEngageLoggerType to enable console logging of ‘loglevel’ type and above.
@property (nonatomic, readonly) enum MoEngageLoggerType loglevel;
/// Initialize instance of MoEngageConsoleLogConfig
/// \param isLoggingEnabled Bool value to enable/disable console logs.
///
/// \param loglevel <code>MoEngageLoggerType</code> to enable console logging of ‘loglevel’ type and above.
///
- (nonnull instancetype)initWithIsLoggingEnabled:(BOOL)isLoggingEnabled loglevel:(enum MoEngageLoggerType)loglevel OBJC_DESIGNATED_INITIALIZER;
/// Returns instance of type <code>MoEngageConsoleLogConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageConsoleLogConfig</code> with console logging disabled and logLevel as info.
/// :nodoc:
+ (MoEngageConsoleLogConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageCoreCache")
@interface MoEngageCoreCache : NSObject
@property (nonatomic) BOOL isPartnerInitialized;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MoEngageSDKConfig;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageCoreHandler")
@interface MoEngageCoreHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCoreHandler * _Nonnull sharedInstance;)
+ (MoEngageCoreHandler * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull globalQueue;)
+ (dispatch_queue_t _Nonnull)globalQueue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (MoEngageSDKInstance * _Nullable)initializeInstanceWithSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig isDefaultInstance:(BOOL)isDefaultInstance SWIFT_WARN_UNUSED_RESULT;
- (MoEngageSDKConfig * _Nullable)getDefaultSDKConfiguration SWIFT_WARN_UNUSED_RESULT;
- (MoEngageSDKConfig * _Nullable)getSDKConfigForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MoEngageSDKConfig *> * _Nonnull)getAllSDKConfigs SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSDKEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)updateSDKStateWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance sdkState:(BOOL)sdkState;
- (void)enableSDKWithAppId:(NSString * _Nullable)appId;
- (void)disableSDKWithAppId:(NSString * _Nullable)appId;
- (BOOL)isSDKEnabledForInstanceWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeviceUniqueIDPresentInKeyChainWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
- (void)dismissRichLandingWebViewControllerWithAnimation:(BOOL)animate;
@end

@class MoEngageIntegrationInfo;
enum MoEngagePartnerIntegrationType : NSInteger;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageCoreIntegrator")
@interface MoEngageCoreIntegrator : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCoreIntegrator * _Nonnull sharedInstance;)
+ (MoEngageCoreIntegrator * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)addIntergrationInfoWithInfo:(MoEngageIntegrationInfo * _Nonnull)info appId:(NSString * _Nullable)appId;
- (MoEngageCoreCache * _Nonnull)getCoreCache:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
/// Enable processing lifecycle callback for partner integrated instance.
/// \param workspaceId The workspace Id referring to SDK instance.
///
/// \param integrationType The integration type.
///
- (void)enableSDKForPartnerWithWorkspaceId:(NSString * _Nonnull)workspaceId integrationType:(enum MoEngagePartnerIntegrationType)integrationType;
@end

@class UIViewController;
enum MoEngageSDKState : NSInteger;
@class UIApplication;
enum MoEngageInAppWhiteList : NSInteger;
enum MoEngageRegistrationState : NSInteger;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageCoreUtils")
@interface MoEngageCoreUtils : NSObject
+ (NSInteger)getMaxParallelInstancesSupported SWIFT_WARN_UNUSED_RESULT;
+ (MoEngageSDKConfig * _Nullable)getSDKInstanceForInstanceID:(NSString * _Nullable)instanceID SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSDKLibraryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getInstanceRootDirectoryPathForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDocumentsDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (void)removeFileAtPath:(NSString * _Nonnull)path sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
+ (UIViewController * _Nullable)getTopMostViewController SWIFT_WARN_UNUSED_RESULT;
+ (void)showAlertViewWithMessage:(NSString * _Nonnull)msg andTitle:(NSString * _Nonnull)title;
+ (void)openDeeplinkWithUrlString:(NSString * _Nullable)urlStr SWIFT_AVAILABILITY(ios_app_extension,unavailable);
+ (void)openExternalBrowserWithUrlString:(NSString * _Nullable)urlStr;
+ (NSURL * _Nullable)getUrlFromString:(NSString * _Nullable)urlStr SWIFT_WARN_UNUSED_RESULT;
+ (void)openDeeplinkWithUrl:(NSURL * _Nullable)url SWIFT_AVAILABILITY(ios_app_extension,unavailable);
+ (void)openRichLandingWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openRichLandingWithUrl:(NSURL * _Nullable)url;
+ (NSString * _Nonnull)getMoEngageSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getMainTargetAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppBundleId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getIDFV SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModel SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceOSVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelType SWIFT_WARN_UNUSED_RESULT;
+ (void)savePushTokenWithToken:(NSString * _Nonnull)token sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
+ (NSString * _Nullable)getPushTokenWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getSDKUniqueIdForInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)generateSDKUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isSdkEnabledForInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (enum MoEngageSDKState)fetchMoEngageSDKState:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAnalyticsEnabledWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)updateSDKState:(BOOL)isEnabled inInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
+ (BOOL)isDataTrackingEnabledForInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setDataTrackingOptOutStatusForInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance optOutStatus:(BOOL)optOutStatus;
+ (UIApplication * _Nullable)sharedUIApplication SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isAppInBackground;)
+ (BOOL)isAppInBackground SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsAppInBackground:(BOOL)value;
+ (void)setIDFAOptOutStatusForInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance optOutStatus:(BOOL)optOutStatus;
+ (void)setIDFVOptOutStatusForInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance optOutStatus:(BOOL)optOutStatus;
+ (BOOL)isIDFATrackingEnabledForInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isIDFVTrackingEnabledForInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (MoEngageAccountMeta * _Nonnull)getAccountMetaWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getStringRepresentationWithEvent:(enum MoEngageInAppWhiteList)event SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isUserRegisteredWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserRegisterStateWithState:(enum MoEngageRegistrationState)state sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Geneartes SHA256 hash string from input string.
/// \param input The string to be hashed.
///
///
/// returns:
/// SHA256 hashed string.
+ (NSString * _Nonnull)generateHashValueFrom:(NSString * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Data-center to which the moengage data should flow.
typedef SWIFT_ENUM(NSInteger, MoEngageDataCenter, open) {
  MoEngageDataCenterData_center_default = 0,
  MoEngageDataCenterData_center_01 = 1,
  MoEngageDataCenterData_center_02 = 2,
  MoEngageDataCenterData_center_03 = 3,
  MoEngageDataCenterData_center_04 = 4,
  MoEngageDataCenterData_center_05 = 5,
  MoEngageDataCenterData_center_06 = 6,
};

@class NSDateFormatter;
@class NSDate;
@class NSDateComponents;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageDateUtils")
@interface MoEngageDateUtils : NSObject
+ (NSDateFormatter * _Nullable)dateFormatterForFormat:(NSString * _Nullable)format andforGMT:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForUsPosixLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForDeviceLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 sameAsDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 laterToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 earlierToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDateLaterToCurrentTime:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkDateInRange:(NSDate * _Nullable)dateToEvaluate fromStartDate:(NSDate * _Nullable)startDate toEndDate:(NSDate * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkTimeInRange:(NSDateComponents * _Nonnull)timeToEvaluate fromStartTime:(NSDateComponents * _Nonnull)startTime toEndTime:(NSDateComponents * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getGMTtimeEpochForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (int64_t)getGMTtimeEpochMilliSecondsForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getLocalTimeForEventsPayloadForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateByAddingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateBySubtractingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDateComponents * _Nullable)getDateComponentsFromTimeString:(NSString * _Nullable)timeString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringInDeviceLocaleForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getDateForString:(NSString * _Nullable)str withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageDelayedOperation")
@interface MoEngageDelayedOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isConcurrent) BOOL concurrent;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)start;
- (void)main;
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MoEngageDelayedOperation (SWIFT_EXTENSION(MoEngageCore))
@end


SWIFT_CLASS_NAMED("Continuation")
@interface MoEngageDelayedOperationContinuation : NSObject
- (void)fulfill;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageDelayedOperationManager")
@interface MoEngageDelayedOperationManager : NSObject
- (nonnull instancetype)initWithNamed:(NSString * _Nonnull)name forInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance OBJC_DESIGNATED_INITIALIZER;
- (void)scheduleWithId:(NSString * _Nonnull)id withDelay:(double)delay performingAction:(void (^ _Nonnull)(MoEngageDelayedOperationContinuation * _Nonnull))action cancellation:(void (^ _Nonnull)(void))cancellation;
- (BOOL)isAlreadyScheduledForId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)cancelAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageEventConditionEvaluator")
@interface MoEngageEventConditionEvaluator : NSObject
- (nonnull instancetype)initWithEventName:(NSString * _Nonnull)name andConditionDict:(NSDictionary<NSString *, id> * _Nonnull)conditionDict OBJC_DESIGNATED_INITIALIZER;
- (BOOL)checkConditionSatisfiedForEvent:(NSString * _Nonnull)event andAttributesPayload:(NSDictionary<NSString *, id> * _Nonnull)attributesPayload inInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore29MoEngageGeneralAsyncOperation")
@interface MoEngageGeneralAsyncOperation : MoEngageAsyncOperation
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class responsible to create location instance
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageGeoLocation")
@interface MoEngageGeoLocation : NSObject
/// Latitude of the location
@property (nonatomic) double latitude;
/// Longitude of the location
@property (nonatomic) double longitude;
/// Initialize method to create an instance of <code>MoEngageGeoLocation</code>
/// \param lat Latitude of the location
///
/// \param lng Longitude of the location
///
- (nonnull instancetype)initWithLatitude:(double)lat andLongitude:(double)lng OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageGeofenceHandler")
@interface MoEngageGeofenceHandler : NSObject <MoEngageModule>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (MoEngageModuleInfo * _Nullable)getInfoWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageGeofenceManager")
@interface MoEngageGeofenceManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageGeofenceManager * _Nonnull sharedInstance;)
+ (MoEngageGeofenceManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeGeofenceWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)moengageSDKStateUpdatedWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Handle callback for environment change.
/// \param sdkInstance The instance to migrate.
///
- (void)migrateEnvironmentForSDK:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

@class UIImageView;

/// :nodoc:
SWIFT_PROTOCOL("_TtP12MoEngageCore19MoEngageGifDelegate_")
@protocol MoEngageGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender url:(NSURL * _Nonnull)url error:(NSError * _Nullable)error;
@end


/// Class to configure the InApp.
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageInAppConfig")
@interface MoEngageInAppConfig : NSObject
/// If yes , callback is provided through MoEngageInAppNativeDelegate method
@property (nonatomic) BOOL shouldProvideDeeplinkCallback;
/// Init method for MoEngageInAppConfig
/// \param safeAreaInset Inset value for nudge placement
///
- (nonnull instancetype)initWithSafeAreaInset:(CGFloat)safeAreaInset OBJC_DESIGNATED_INITIALIZER;
/// Init method for MoEngageInAppConfig
/// \param shouldProvideDeeplinkCallback If yes , callback is provided through MoEngageInAppNativeDelegate method
///
- (nonnull instancetype)initWithShouldProvideDeeplinkCallback:(BOOL)shouldProvideDeeplinkCallback OBJC_DESIGNATED_INITIALIZER;
/// Init method for MoEngageInAppConfig
/// \param safeAreaInset Inset value for nudge placement
///
/// \param shouldProvideDeeplinkCallback If yes , callback is provided through MoEngageInAppNativeDelegate method
///
- (nonnull instancetype)initWithSafeAreaInset:(CGFloat)safeAreaInset shouldProvideDeeplinkCallback:(BOOL)shouldProvideDeeplinkCallback OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of type <code>MoEngageInAppConfig</code>  with default configuration
///
/// returns:
/// Instance of type <code>MoEngageInAppConfig</code>
/// :nodoc:
+ (MoEngageInAppConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageInAppManager")
@interface MoEngageInAppManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageInAppManager * _Nonnull sharedInstance;)
+ (MoEngageInAppManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInAppWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Handle callback for environment change.
/// \param sdkInstance The instance to migrate.
///
- (void)migrateEnvironmentForSDK:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageInAppWhiteList, open) {
  MoEngageInAppWhiteListInAppShown = 0,
  MoEngageInAppWhiteListInAppClicked = 1,
  MoEngageInAppWhiteListInAppDismissed = 2,
  MoEngageInAppWhiteListInAppAutoDismissed = 3,
  MoEngageInAppWhiteListInAppRating = 4,
};


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore21MoEngageInboxDelegate")
@interface MoEngageInboxDelegate : NSObject <MoEngageModule>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (MoEngageModuleInfo * _Nullable)getInfoWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageInboxManager")
@interface MoEngageInboxManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageInboxManager * _Nonnull sharedInstance;)
+ (MoEngageInboxManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInboxWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Handle callback for environment change.
/// \param sdkInstance The instance to migrate.
///
- (void)migrateEnvironmentForSDK:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageIntegrationInfo")
@interface MoEngageIntegrationInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationType;
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationVersion;
- (nonnull instancetype)initWithPluginType:(NSString * _Nonnull)pluginType version:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model to set the keychain configuration
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageKeyChainConfig")
@interface MoEngageKeyChainConfig : NSObject
/// Keychain group name to save the encryption key in keychain
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
/// Returns the instance of type <code>MoEngageKeyChainConfig</code>  with default configuration
///
/// returns:
/// Instance of type <code>MoEngageKeyChainConfig</code>
/// :nodoc:
+ (MoEngageKeyChainConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of <code>MoEngageKeyChainConfig</code>
/// \param groupName Keychain sharing name as set in Capabilities.
///
- (nonnull instancetype)initWithGroupName:(NSString * _Nonnull)groupName OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageLiveActivityDelegate")
@interface MoEngageLiveActivityDelegate : NSObject <MoEngageModule>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (MoEngageModuleInfo * _Nullable)getInfoWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore14MoEngageLogger")
@interface MoEngageLogger : NSObject
- (nonnull instancetype)initWithSdkInstanceTag:(NSString * _Nonnull)sdkInstanceTag OBJC_DESIGNATED_INITIALIZER;
/// Method for logging instance specific logs.
/// \param logLevel <code>MoEngageLoggerType</code> to log the information with provided ‘logLevel’ value. Defaults to <code>.verbose</code>.
///
/// \param message The message to log of <code>String</code> type.
///
/// \param stackTrace An optional array of <code>String</code> representing the stack trace to be sent to backend when remote logging.
///
/// \param label Optional <code>String</code> to add the module tag if required.
///
/// \param shouldLogContext Bool value to enable/disable context. Defaults to <code>true</code>.
///
/// \param file The file name where the log message was called.
///
/// \param method The method name where the log message was called.
/// :nodoc:
///
- (void)logWithLogLevel:(enum MoEngageLoggerType)logLevel message:(NSString * _Nonnull)message stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label shouldLogContext:(BOOL)shouldLogContext file:(NSString * _Nonnull)file line:(NSUInteger)line method:(NSString * _Nonnull)method;
/// Method for logging default (not instance specific)  logs.
/// \param logLevel <code>MoEngageLoggerType</code> to log the information with provided ‘logLevel’ value. Defaults to <code>.verbose</code>.
///
/// \param message The message to log of <code>String</code> type.
///
/// \param stackTrace An optional array of <code>String</code> representing the stack trace to be sent to backend when remote logging.
///
/// \param label Optional <code>String</code> to add the module tag if required.
///
/// \param shouldLogContext Bool value to enable/disable context. Defaults to <code>true</code>.
///
/// \param file The file name where the log message was called.
///
/// \param method The method name where the log message was called.
/// :nodoc:
///
+ (void)logDefaultWithLogLevel:(enum MoEngageLoggerType)logLevel message:(NSString * _Nonnull)message stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label shouldLogContext:(BOOL)shouldLogContext file:(NSString * _Nonnull)file line:(NSUInteger)line method:(NSString * _Nonnull)method;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageLoggerType, open) {
  MoEngageLoggerTypeVerbose = 0,
  MoEngageLoggerTypeDebug = 1,
  MoEngageLoggerTypeInfo = 2,
  MoEngageLoggerTypeWarning = 3,
  MoEngageLoggerTypeError = 4,
/// Represents integration error not handled by SDK
/// resulting in undefined behaviour and data loss.
  MoEngageLoggerTypeFatal = 5,
};


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageMessagingHandler")
@interface MoEngageMessagingHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageMessagingManager")
@interface MoEngageMessagingManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageMessagingManager * _Nonnull sharedInstance;)
+ (MoEngageMessagingManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeMessagingWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)logoutWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Handle callback for environment change.
/// \param sdkInstance The instance to migrate.
///
- (void)migrateEnvironmentForSDK:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end



/// Represents info for a module.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore18MoEngageModuleInfo")
@interface MoEngageModuleInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull metadata;
/// Create new info data.
/// \param name The name of module.
///
/// \param version The version of module.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name version:(NSString * _Nonnull)version metadata:(NSDictionary<NSString *, id> * _Nonnull)metadata OBJC_DESIGNATED_INITIALIZER;
/// Info of core module
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageModuleInfo * _Nonnull sdkInfo;)
+ (MoEngageModuleInfo * _Nonnull)sdkInfo SWIFT_WARN_UNUSED_RESULT;
/// Info of secority module
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageModuleInfo * _Nonnull securityInfo;)
+ (MoEngageModuleInfo * _Nonnull)securityInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration Related to Network Request Authorization.
SWIFT_CLASS("_TtC12MoEngageCore34MoEngageNetworkAuthorizationConfig")
@interface MoEngageNetworkAuthorizationConfig : NSObject
/// Jwt Configuration, if true all Network Request will be authenticated with jwt token
@property (nonatomic, readonly) BOOL isJwtEnbaled;
/// Initialize the instance of type <code>MoEngageNetworkAuthorizationConfig</code>
/// \param isJwtEnbaled Pass true to enable to authenticate all API calls with jwt token
///
- (nonnull instancetype)initWithIsJwtEnbaled:(BOOL)isJwtEnbaled OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of MoEngageNetworkAuthorizationConfig with default configuration
///
/// returns:
/// Instance of MoEngageNetworkAuthorizationConfig with jwt disabled
/// :nodoc:
+ (MoEngageNetworkAuthorizationConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Prints the description of <code>MoEngageNetworkAuthorizationConfig</code>
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageNetworkConfiguration")
@interface MoEngageNetworkConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API Data Encryption Configuration
SWIFT_CLASS("_TtC12MoEngageCore33MoEngageNetworkDataSecurityConfig")
@interface MoEngageNetworkDataSecurityConfig : NSObject
/// If true sdk will encrypt all data in the API Request.
@property (nonatomic, readonly) BOOL isEncryptionEnabled;
/// Encryption Key which will be use to encrypt/decrypt data in Debug mode
@property (nonatomic, copy) NSString * _Nonnull encryptionKeyDebug;
/// Encryption Key which will be use to encrypt/decrypt data in Release mode
@property (nonatomic, copy) NSString * _Nonnull encryptionKeyRelease;
/// Initialize the instance of MoEngageNetworkDataSecurityConfig
/// \param isEncryptionEnabled Pass true to enable the API encryption
///
/// \param encryptionKeyDebug Encryption Key which will be use to encrypt/decrypt data in Debug mode
///
/// \param encryptionKeyRelease Encryption Key which will be use to encrypt/decrypt data in Release mode
///
- (nonnull instancetype)initWithIsEncryptionEnabled:(BOOL)isEncryptionEnabled encryptionKeyDebug:(NSString * _Nonnull)encryptionKeyDebug encryptionKeyRelease:(NSString * _Nonnull)encryptionKeyRelease OBJC_DESIGNATED_INITIALIZER;
/// Prints the description of MoEngageNetworkDataSecurityConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns the instance of MoEngageNetworkDataSecurityConfig with default configuration
///
/// returns:
/// Instance of MoEngageNetworkDataSecurityConfig with encryption disabled
/// :nodoc:
+ (MoEngageNetworkDataSecurityConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration for Network Request
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageNetworkRequestConfig")
@interface MoEngageNetworkRequestConfig : NSObject
/// Configuration Related to Network Request Data Security.
@property (nonatomic, readonly, strong) MoEngageNetworkDataSecurityConfig * _Nonnull dataSecurityConfig;
/// Configuration Related to Network Request Authorization.
@property (nonatomic, readonly, strong) MoEngageNetworkAuthorizationConfig * _Nonnull authorizationConfig;
/// Returns instance of type <code>MoEngageNetworkRequestConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageNetworkRequestConfig</code> with all feature disabled.
/// :nodoc:
+ (MoEngageNetworkRequestConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param authorizationConfig Instance of type <code>MoEngageNetworkAuthorizationConfig</code>
///
/// \param dataSecurityConfig Instance of type <code>MoEngageNetworkDataSecurityConfig</code>
///
- (nonnull instancetype)initWithAuthorizationConfig:(MoEngageNetworkAuthorizationConfig * _Nonnull)authorizationConfig dataSecurityConfig:(MoEngageNetworkDataSecurityConfig * _Nonnull)dataSecurityConfig OBJC_DESIGNATED_INITIALIZER;
/// Convinience initializer to create the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param authorizationConfig Instance of type <code>MoEngageNetworkAuthorizationConfig</code>
///
- (nonnull instancetype)initWithAuthorizationConfig:(MoEngageNetworkAuthorizationConfig * _Nonnull)authorizationConfig;
/// Convinience initializer to create the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param dataSecurityConfig Instance of type <code>MoEngageNetworkDataSecurityConfig</code>
///
- (nonnull instancetype)initWithDataSecurityConfig:(MoEngageNetworkDataSecurityConfig * _Nonnull)dataSecurityConfig;
/// Prints the description of MoEngageNetworkRequestConfig instance
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageNetworkService, open) {
  MoEngageNetworkServiceGetConfig = 0,
  MoEngageNetworkServiceInitialize = 1,
  MoEngageNetworkServiceSendReports = 2,
  MoEngageNetworkServiceInAppMetaFetch = 3,
  MoEngageNetworkServiceInAppGetPayload = 4,
  MoEngageNetworkServiceInAppGetTestPayload = 5,
  MoEngageNetworkServiceInAppSendStats = 6,
  MoEngageNetworkServiceInAppTemplatesPayload = 7,
  MoEngageNetworkServiceInboxFetch = 8,
  MoEngageNetworkServiceSendCategories = 9,
  MoEngageNetworkServiceRealTimeTriggersFetch = 10,
  MoEngageNetworkServiceCheckUserInSegment = 11,
  MoEngageNetworkServiceGeofenceHit = 12,
  MoEngageNetworkServiceGeofencesFetch = 13,
  MoEngageNetworkServiceCardsFetch = 14,
  MoEngageNetworkServiceCardsDelete = 15,
  MoEngageNetworkServiceCardsUserActivity = 16,
  MoEngageNetworkServiceCrashLake = 17,
  MoEngageNetworkServiceRegister = 18,
  MoEngageNetworkServiceUnregister = 19,
};


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageNetworkUtils")
@interface MoEngageNetworkUtils : NSObject
+ (NSDictionary<NSString *, id> * _Nonnull)getQueryParamsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance isV1ParamsRequired:(BOOL)isV1ParamsRequired SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDeviceUniqueIDWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Integration Partners for MoEngage SDK.
typedef SWIFT_ENUM(NSInteger, MoEngagePartnerIntegrationType, open) {
/// No Integration type.
  MoEngagePartnerIntegrationTypeNone = 0,
/// Integration Partner <a href="https://segment.com/">Segment</a>
  MoEngagePartnerIntegrationTypeSegment = 1,
/// Integration Partner <a href="https://www.mparticle.com/">mParticle</a>
  MoEngagePartnerIntegrationTypeMParticleNative = 2,
};


/// Class responsible to build attributes for event
SWIFT_CLASS("_TtC12MoEngageCore18MoEngageProperties")
@interface MoEngageProperties : NSObject
/// Create <code>MoEngageProperties</code> instance with given attributedDict
/// \param attributesDict attributes dict for the event
///
- (nonnull instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nullable)attributesDict OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)updateAttributesWithPluginPayload:(NSDictionary<NSString *, id> * _Nullable)payloadDict;
/// Add an attribute to <code>MoEngageProperties</code>
/// \param attrVal attribute value
///
/// \param attrName attribute name
///
- (void)addAttribute:(id _Nullable)attrVal withName:(NSString * _Nonnull)attrName;
/// Add Location attribute to <code>MoEngageProperties</code>
/// \param attrVal location attribute of type <code>MoEngageGeoLocation</code>
///
/// \param attrVal location attribute of type <code>MoEngageGeoLocation</code>
///
/// \param attrName attribute name
///
- (void)addLocationAttribute:(MoEngageGeoLocation * _Nonnull)attrVal withName:(NSString * _Nonnull)attrName;
/// Add date attribute to  <code>MoEngageProperties</code>
/// \param attrVal value of type <code>Date</code>
///
/// \param attrName attribute name
///
- (void)addDateAttribute:(NSDate * _Nonnull)attrVal withName:(NSString * _Nonnull)attrName;
/// Add ISO date attribute to  <code>MoEngageProperties</code>
/// note:
/// ISO format accepted  yyyy-MM-dd’T’HH:mm:ss.SSS’Z’ /  yyyy-MM-dd’T’HH:mm:ss’Z’
/// \param dateString ISO date string
///
/// \param attrName attribute value
///
- (void)addDateISOStringAttribute:(NSString * _Nonnull)dateString withName:(NSString * _Nonnull)attrName;
/// Add Epoch Date attribute to <code>MoEngageProperties</code>
/// \param epoch Date attribute of type Double
///
/// \param attrName attribute name
///
- (void)addDateEpochAttribute:(double)epoch withName:(NSString * _Nonnull)attrName;
/// Set the event as non-interactive.
- (void)setNonInteractive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageRealTimeTriggerDelegate")
@interface MoEngageRealTimeTriggerDelegate : NSObject <MoEngageModule>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (MoEngageModuleInfo * _Nullable)getInfoWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageRealTimeTriggerManager")
@interface MoEngageRealTimeTriggerManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageRealTimeTriggerManager * _Nonnull sharedInstance;)
+ (MoEngageRealTimeTriggerManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeRTTWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillBecomeInActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Handle callback for environment change.
/// \param sdkInstance The instance to migrate.
///
- (void)migrateEnvironmentForSDK:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

enum MoEngageRegistrationType : NSInteger;
enum MoEngageRegistrationResult : NSInteger;

/// User Registration Data
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageRegistrationData")
@interface MoEngageRegistrationData : NSObject
/// Account info
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// Enum indicating the User-registration type
@property (nonatomic, readonly) enum MoEngageRegistrationType type;
/// Enum indicating the User-registration state
@property (nonatomic, readonly) enum MoEngageRegistrationState state;
/// Enum indicating the User-registration  result.
@property (nonatomic, readonly) enum MoEngageRegistrationResult result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Registration API result.
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationResult, open) {
/// Sucess if the register/unregister API is successful
  MoEngageRegistrationResultSuccess = 0,
/// Failure if the register/unregister API is fails
  MoEngageRegistrationResultFailure = 1,
};

/// :nodoc:
/// User Registration Result states
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationState, open) {
/// User is Registered
  MoEngageRegistrationStateRegistered = 0,
/// User is Unregistered
  MoEngageRegistrationStateUnregistered = 1,
/// The User Registration flow has to be enabled at the time of MoEngage SDK initialization to register the user. Use  <code>MoEngageUserRegistrationConfig</code> to enable user registration
  MoEngageRegistrationStateFlowNotEnabled = 2,
/// State when <code>MoEngageSDKCore.unregisterUser</code> is called without successfully registering the user using <code>MoEngageSDKCore.registerUser</code>.
  MoEngageRegistrationStateUserNotRegistered = 3,
/// State when passed data is invalid
  MoEngageRegistrationStateInvalidData = 4,
/// State when account is blocked or sdk is disabled
  MoEngageRegistrationStateSdkOrAccountDisabled = 5,
};

/// User registration type
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationType, open) {
/// Register the user
  MoEngageRegistrationTypeRegister = 0,
/// UnRegister the user.
  MoEngageRegistrationTypeUnregister = 1,
};


SWIFT_CLASS("_TtC12MoEngageCore30MoEngageRequestBodyBuildResult")
@interface MoEngageRequestBodyBuildResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore32MoEngageRichNotificationDelegate")
@interface MoEngageRichNotificationDelegate : NSObject <MoEngageModule>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (MoEngageModuleInfo * _Nullable)getInfoWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageRichNotificationManager")
@interface MoEngageRichNotificationManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageRichNotificationManager * _Nonnull sharedInstance;)
+ (MoEngageRichNotificationManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MoEngageUserGender : NSInteger;

/// Class to track data on the MoEngage Platform.
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageSDKAnalytics")
@interface MoEngageSDKAnalytics : NSObject
/// Singleton class instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageSDKAnalytics * _Nonnull sharedInstance;)
+ (MoEngageSDKAnalytics * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Method to update SDK version
/// :nodoc:
- (void)trackSDKVersion;
/// :nodoc:
- (void)updateSessionSourceWithPushPayload:(NSDictionary * _Nonnull)payload fromMoEngage:(BOOL)isMoEngagePush;
/// :nodoc:
- (void)updateSessionSourceWithURL:(NSURL * _Nonnull)url;
/// :nodoc:
- (void)pushTokenUpdatedWithAppId:(NSString * _Nonnull)appId;
/// This method tells the SDK whether it is a fresh install or an existing application was updated.
/// \param appStatus Enum of type <code>MoEngageAppStatus</code>
///
/// \param appID MoEngage Account Identifier.
///
- (void)appStatus:(enum MoEngageAppStatus)appStatus forAppID:(NSString * _Nullable)appID;
/// This method tells the default SDK instance whether it is a fresh install or an existing application was updated.
/// \param appStatus Enum of type <code>MoEngageAppStatus</code>
///
- (void)appStatus:(enum MoEngageAppStatus)appStatus;
/// Track Event for Default MoEngage Instance.
/// \param name name of the event
///
/// \param properties instance of type <code>MoEngageProperties</code> that contains attributes related to event
///
- (void)trackEvent:(NSString * _Nonnull)name withProperties:(MoEngageProperties * _Nullable)properties;
/// Track Event  for Secondary instance
/// \param name event name
///
/// \param properties instance of type <code>MoEngageProperties</code> that contains attributes related to event
///
/// \param appID MoEngage Account Identifier.
///
- (void)trackEvent:(NSString * _Nonnull)name withProperties:(MoEngageProperties * _Nullable)properties forAppID:(NSString * _Nullable)appID;
/// Sync the tracked events instantaneously for Secondary instance
/// \param appID MoEngage Account Identifier.
///
/// \param completionBlock completion block to be called after events are flushed out
///
- (void)flushForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nullable)(BOOL))completionBlock;
/// Sync the tracked events instantaneously for Default instance
- (void)flush;
/// Sync the tracked events instantaneously for Secondary instance
/// \param appID MoEngage Account identifier
///
- (void)flushForAppID:(NSString * _Nullable)appID;
/// Sync the tracked events instantaneously for Default instance
/// \param completionBlock completion block to be called after events are flushed out
///
- (void)flushWithCompletionBlock:(void (^ _Nullable)(BOOL))completionBlock;
/// Method to flush  richnotification events for account
/// note:
/// Dont call this method explicitly
/// :nodoc:
/// \param appID optional account identifier.
///
/// \param completionBlock completion block to be called after events are flushed out
///
- (void)flushRichNotificationEventsForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nullable)(BOOL))completionBlock;
/// Set custom user attribute for Secondary instance
/// \param value attribute value
///
/// \param attributeName attribute name
///
/// \param appID MoEngage account identifier
///
- (void)setUserAttribute:(id _Nullable)value withAttributeName:(NSString * _Nonnull)attributeName forAppID:(NSString * _Nullable)appID;
/// Set custom user attribute for Default instance
/// \param value attribute value
///
/// \param attributeName attribute name
///
- (void)setUserAttribute:(id _Nullable)value withAttributeName:(NSString * _Nonnull)attributeName;
/// Set epoch time for Secondary instance
/// \param dateEpoch Epoch date of type double
///
/// \param attributeName attribute name of type String
///
/// \param appID MoEngage account identifier
///
- (void)setUserAttributeEpochTime:(double)dateEpoch withAttributeName:(NSString * _Nonnull)attributeName forAppID:(NSString * _Nullable)appID;
/// Set epoch time for Default instance
/// \param dateEpoch Epoch date of type double
///
/// \param attributeName attribute name of type String
///
- (void)setUserAttributeEpochTime:(double)dateEpoch withAttributeName:(NSString * _Nonnull)attributeName;
/// Set User attribute date for Secondary instance
/// \param date attribute value as Date
///
/// \param attributeName attribute name
///
/// \param appID MoEngage account identifier
///
- (void)setUserAttributeDate:(NSDate * _Nonnull)date withAttributeName:(NSString * _Nonnull)attributeName forAppID:(NSString * _Nullable)appID;
/// Set User attribute date for Default instance
/// \param date attribute value as Date
///
/// \param attributeName attribute name
///
- (void)setUserAttributeDate:(NSDate * _Nonnull)date withAttributeName:(NSString * _Nonnull)attributeName;
/// Set User attribute ISO date for Secondary instance
/// note:
/// ISO accepted formats are yyyy-MM-dd’T’HH:mm:ss’Z’/yyyy-MM-dd’T’HH:mm:ss.SSS’Z’
/// \param dateStr ISO date  of type  string
///
/// \param attributeName attribute name
///
/// \param appID MoEngage account identifier
///
- (void)setUserAttributeISODate:(NSString * _Nonnull)dateString withAttributeName:(NSString * _Nonnull)attributeName forAppID:(NSString * _Nullable)appID;
/// Set User attribute ISO date
/// note:
/// ISO accepted formats are yyyy-MM-dd’T’HH:mm:ss’Z’/yyyy-MM-dd’T’HH:mm:ss.SSS’Z’
/// \param dateString ISO date  of type  string
///
/// \param attributeName attribute name
///
- (void)setUserAttributeISODate:(NSString * _Nonnull)dateString withAttributeName:(NSString * _Nonnull)attributeName;
/// Set custom user location for Secondary instance
/// \param location <code>MoEngageGeoLocation</code> instance
///
/// \param attributeName attribute name
///
/// \param appID MoEngage Account Identifier
///
- (void)setLocation:(MoEngageGeoLocation * _Nonnull)location withAttributeName:(NSString * _Nonnull)attributeName forAppID:(NSString * _Nullable)appID;
/// Set custom user location
/// \param location <code>MoEngageGeoLocation</code> instance
///
/// \param attributeName attribute name
///
- (void)setLocation:(MoEngageGeoLocation * _Nonnull)location withAttributeName:(NSString * _Nonnull)attributeName;
/// Set an Alias to update the existing Unique Id for Secondary instance
/// \param alias identifier
///
/// \param appID MoEngage Account Identifier
///
- (void)setAlias:(NSString * _Nonnull)alias forAppID:(NSString * _Nullable)appID;
/// Set an Alias to update the existing Unique Id for Default instance
/// \param alias identifier
///
- (void)setAlias:(NSString * _Nonnull)alias;
/// Set unique ID for Secondary instance
/// \param uniqueID Unique ID
///
/// \param appID MoEngage Account identifier
///
- (void)setUniqueID:(NSString * _Nonnull)uniqueID forAppID:(NSString * _Nullable)appID;
/// Set unique ID for Default instance
/// \param uniqueID Unique ID
///
- (void)setUniqueID:(NSString * _Nonnull)uniqueID;
/// Set Email ID for Secondary instance
/// \param emailID emailID value.
///
/// \param appID MoEngage Account identifier
///
- (void)setEmailID:(NSString * _Nonnull)emailID forAppID:(NSString * _Nullable)appID;
/// Set Email ID
/// \param emailID emailID value.
///
- (void)setEmailID:(NSString * _Nonnull)emailID;
/// Set user name for Secondary instance
/// \param userName User Name value passed by user
///
/// \param appID MoEngage Account identifier
///
- (void)setName:(NSString * _Nonnull)userName forAppID:(NSString * _Nullable)appID;
/// Set user name
/// \param userName User Name value passed by user
///
- (void)setName:(NSString * _Nonnull)userName;
/// Set User first name for Secondary instance
/// \param firstName First Name value passed by user
///
/// \param appID MoEngage Account identifier
///
- (void)setFirstName:(NSString * _Nonnull)firstName forAppID:(NSString * _Nullable)appID;
/// Set User first name
/// \param firstName First Name value passed by user
///
- (void)setFirstName:(NSString * _Nonnull)firstName;
/// Set User last name for Secondary instance
/// \param lastName Last Name value passed by user
///
/// \param appID MoEngage Account identifier
///
- (void)setLastName:(NSString * _Nonnull)lastName forAppID:(NSString * _Nullable)appID;
/// Set User last name
/// \param lastName Last Name value passed by user
///
- (void)setLastName:(NSString * _Nonnull)lastName;
/// Set mobile number for Secondary instance
/// \param mobileNum Mobile Number value passed by user
///
/// \param appID MoEngage Account identifier
///
- (void)setMobileNumber:(NSString * _Nonnull)mobileNum forAppID:(NSString * _Nullable)appID;
/// Set mobile number
/// \param mobileNum Mobile Number value passed by user
///
- (void)setMobileNumber:(NSString * _Nonnull)mobileNum;
/// Set User gender for Secondary instance
/// \param gender Gender value passed by user
///
/// \param appID MoEngage Account identifier
///
- (void)setGender:(enum MoEngageUserGender)gender forAppID:(NSString * _Nullable)appID;
/// Set User gender
/// \param gender Gender value passed by user
///
- (void)setGender:(enum MoEngageUserGender)gender;
/// Set User Date of Birth for Secondary instance
/// \param dob Date of Birth passed by user
///
/// \param appID MoEngage Account identifier
///
- (void)setDateOfBirth:(NSDate * _Nonnull)dob forAppID:(NSString * _Nullable)appID;
/// Set User Date of Birth
/// \param dob Date of Birth passed by user
///
- (void)setDateOfBirth:(NSDate * _Nonnull)dob;
/// Set user Date of Birth ISO format for Secondary instance
/// note:
/// ISO format accepted  yyyy-MM-dd’T’HH:mm:ss.SSS’Z’ /  yyyy-MM-dd’T’HH:mm:ss’Z’
/// \param dateString attribute value accepted in ISO format
///
/// \param appID MoEngage Account identifier
///
- (void)setDateOfBirthInISO:(NSString * _Nonnull)dateString forAppID:(NSString * _Nullable)appID;
/// Method to set user date of birth ISO format
/// note:
/// ISO format accepted  yyyy-MM-dd’T’HH:mm:ss.SSS’Z’ /  yyyy-MM-dd’T’HH:mm:ss’Z’
/// \param dateString attribute value accepted in ISO format
///
- (void)setDateOfBirthInISO:(NSString * _Nonnull)dateString;
/// Set user location for Secondary instance
/// \param location Location passed by user
///
/// \param appID MoEngage Account identifier
///
- (void)setLocation:(MoEngageGeoLocation * _Nonnull)location forAppID:(NSString * _Nullable)appID;
/// Set user location
/// \param location Location passed by user
///
- (void)setLocation:(MoEngageGeoLocation * _Nonnull)location;
/// Track user attribute push preference
/// \param isPushEnabled true if Push is enabled else false.
///
/// \param appID MoEngage Account identifier
///
- (void)trackUserPushPreference:(BOOL)isPushEnabled forAppID:(NSString * _Nullable)appID;
/// Tracks device locale.
- (void)trackLocale;
/// Tracks device locale.
/// \param appID MoEngage Account identifier
///
- (void)trackLocaleForAppID:(NSString * _Nullable)appID;
/// Invalidates the existing sessions and user attributes and treats all actions performed by the user as a new user after this method is called
/// \param appID optional account identifier.
///
/// \param completionBlock Returns true if reset is successful else false
///
- (void)resetUserForAppID:(NSString * _Nullable)appID withCompletionBlock:(void (^ _Nullable)(BOOL))completionBlock;
/// Invalidates the existing sessions and user attributes and treats all actions performed by the user as a new user after this method is called
- (void)resetUser;
/// Invalidates the existing sessions and user attributes and treats all actions performed by the user as a new user after this method is called
/// \param completionBlock Returns true if reset is successful else false
///
- (void)resetUserWithCompletionBlock:(void (^ _Nullable)(BOOL))completionBlock;
/// Invalidates the existing sessions and user attributes and treats all actions performed by the user as a new user after this method is called
/// \param appID MoEngage Account identifier
///
- (void)resetUserForAppID:(NSString * _Nullable)appID;
/// API to enable data tracking.
/// \param appID MoEngage Account identifier
///
- (void)enableDataTrackingForAppID:(NSString * _Nullable)appID;
/// API to enable data tracking.
- (void)enableDataTracking;
/// Optionally opt-out of data tracking. When data tracking is opted out no custom event or user attribute is tracked on MoEngage Platform.
/// \param appID MoEngage Account identifier
///
- (void)disableDataTrackingForAppID:(NSString * _Nullable)appID;
/// Optionally opt-out of data tracking. When data tracking is opted out no custom event or user attribute is tracked on MoEngage Platform.
- (void)disableDataTracking;
/// Enable IDFA tracking
/// \param appID MoEngage Account identifier
///
- (void)enableIDFATrackingForAppID:(NSString * _Nullable)appID;
/// Enable IDFA tracking
- (void)enableIDFATracking;
/// Disable IDFA tracking
/// \param appID MoEngage Account identifier
///
- (void)disableIDFATrackingForAppID:(NSString * _Nullable)appID;
/// Disable IDFA tracking
- (void)disableIDFATracking;
/// Enable  IDFV tracking
/// \param appID MoEngage Account identifier
///
- (void)enableIDFVTrackingForAppID:(NSString * _Nullable)appID;
/// Enable  IDFV tracking
- (void)enableIDFVTracking;
/// Disable IDFV tracking
/// \param appID MoEngage Account identifier
///
- (void)disableIDFVTrackingForAppID:(NSString * _Nullable)appID;
/// Disable IDFV tracking
- (void)disableIDFVTracking;
/// Update  source  based on  query params of the URL
/// \param url URL that contains source information in query params
///
- (void)processURL:(NSURL * _Nullable)url;
/// Set the Analytics delegate to get the callback for various Analytics events
/// \param delegate Instance that confirms to <code>MoEngageAnalyticsProtocol</code>
///
/// \param appID Optional Account Identifier
///
- (void)setDelegateWithDelegate:(id <MoEngageAnalyticsCallBack> _Nonnull)delegate forAppID:(NSString * _Nullable)appID;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MoEngageSDKAnalytics (SWIFT_EXTENSION(MoEngageCore))
/// Add unique identities to current user.
/// \param identities The identities uniquely identifying current user.
///
/// \param workspaceId MoEngage Workspace Identifier.
///
- (void)identifyUserWithIdentities:(NSDictionary<NSString *, NSString *> * _Nonnull)identities workspaceId:(NSString * _Nullable)workspaceId;
/// Add unique identifier <code>uid</code> to current user.
/// \param identity The identifier uniquely identifying current user.
///
/// \param workspaceId MoEngage Workspace Identifier.
///
- (void)identifyUserWithIdentity:(NSString * _Nonnull)identity workspaceId:(NSString * _Nullable)workspaceId;
/// Get all the identities set for current user.
/// \param workspaceId MoEngage Workspace Identifier.
///
/// \param completion The block where identties will be provided on main thread.
///
- (void)getUserIdentitiesWithWorkspaceId:(NSString * _Nullable)workspaceId completion:(void (^ _Nonnull)(NSDictionary<NSString *, NSString *> * _Nonnull))completion;
@end


/// MoEngageSDKAppPersonalization provides APIs to track personalization experience events such as impressions and clicks.
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageSDKAppPersonalization")
@interface MoEngageSDKAppPersonalization : NSObject
/// Shared singleton instance for accessing personalization APIs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageSDKAppPersonalization * _Nonnull sharedInstance;)
+ (MoEngageSDKAppPersonalization * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// Tracks an impression event for a single experience.
/// \param experienceAttribute Dictionary containing attributes of the experience.
///
/// \param workspaceId Optional workspace identifier. If not provided, the default workspace is used.
///
- (void)experienceShownWithExperienceAttribute:(NSDictionary<NSString *, id> * _Nonnull)experienceAttribute forWorkspaceId:(NSString * _Nullable)workspaceId;
/// Tracks an impression event for multiple experiences.
/// \param experienceAttributes Array of dictionaries, each containing attributes of an experience.
///
/// \param workspaceId Optional workspace identifier. If not provided, the default workspace is used.
///
- (void)experienceShownWithExperienceAttributes:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)experienceAttributes forWorkspaceId:(NSString * _Nullable)workspaceId;
/// Tracks an impression event for a single experience for the default workspace.
/// \param experienceAttribute Dictionary containing attributes of the experience.
///
- (void)experienceShownWithExperienceAttribute:(NSDictionary<NSString *, id> * _Nonnull)experienceAttribute;
/// Tracks an impression event for multiple experiences for the default workspace.
/// \param experienceAttributes Array of dictionaries, each containing attributes of an experience.
///
- (void)experienceShownWithExperienceAttributes:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)experienceAttributes;
/// Tracks a click event for a single experience for a specific workspace.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     experienceAttribute: Dictionary containing attributes of the experience.
///   </li>
///   <li>
///     workspaceId: Optional workspace identifier. If not provided, the default workspace is used.
///   </li>
/// </ul>
- (void)experienceClickedWithExperienceAttribute:(NSDictionary<NSString *, id> * _Nonnull)experienceAttribute forWorkspaceId:(NSString * _Nullable)workspaceId;
/// Tracks a click event for multiple experiences for a specific workspace.
/// \param experienceAttributes Array of dictionaries, each containing attributes of an experience.
///
/// \param workspaceId Optional workspace identifier. If not provided, the default workspace is used.
///
- (void)experienceClickedWithExperienceAttributes:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)experienceAttributes forWorkspaceId:(NSString * _Nullable)workspaceId;
/// Tracks a click event for a single experience for the default workspace.
/// <ul>
///   <li>
///     Parameter
///   </li>
/// </ul>
- (void)experienceClickedWithExperienceAttribute:(NSDictionary<NSString *, id> * _Nonnull)experienceAttribute;
/// Tracks a click event for multiple experiences for the default workspace.
/// <ul>
///   <li>
///     Parameter
///     <ul>
///       <li>
///         experienceAttributes: Array of dictionaries, each containing attributes of an experience.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)experienceClickedWithExperienceAttributes:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)experienceAttributes;
/// Tracks an impression event for an offering.
/// \param offeringAttributes Dictionary containing attributes of the offering.
///
/// \param workspaceId Optional workspace identifier. If not provided, the default workspace is used.
///
- (void)offeringShownWithOfferingAttributes:(NSDictionary<NSString *, id> * _Nonnull)offeringAttributes forWorkspaceId:(NSString * _Nullable)workspaceId;
/// Tracks an impression event for multiple offerings.
/// \param offeringAttributes Array of dictionaries, each containing attributes of an offering.
///
- (void)offeringShownWithOfferingAttributes:(NSDictionary<NSString *, id> * _Nonnull)offeringAttributes;
/// Tracks a click event for an offering.
/// note:
/// If <code>experienceAttributes</code> is provided, it will also track the experience click event.
/// \param offeringAttributes Dictionary containing attributes of the offering.
///
/// \param experienceAttributes Optional dictionary containing attributes of the experience associated with the offering.
///
/// \param workspaceId Optional workspace identifier. If not provided, the default workspace is used.
///
- (void)offeringClickedWithOfferingAttributes:(NSDictionary<NSString *, id> * _Nonnull)offeringAttributes withExperienceAttributes:(NSDictionary<NSString *, id> * _Nullable)experienceAttributes forWorkspaceId:(NSString * _Nullable)workspaceId;
/// Tracks a click event for an offering with experience attributes.
/// note:
/// If <code>experienceAttributes</code> is provided, it will also track the experience
/// \param offeringAttributes Dictionary containing attributes of the offering.
///
/// \param experienceAttributes Dictionary containing attributes of the experience associated with the offering.
///
- (void)offeringClickedWithOfferingAttributes:(NSDictionary<NSString *, id> * _Nonnull)offeringAttributes withExperienceAttributes:(NSDictionary<NSString *, id> * _Nonnull)experienceAttributes;
/// Tracks a click event for an offering without experience attributes.
/// note:
/// This will track the click event for the offering without any associated experience events
/// <ul>
///   <li>
///     Parameter
///     <ul>
///       <li>
///         offeringAttributes: Dictionary containing attributes of the offering.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)offeringClickedWithOfferingAttributes:(NSDictionary<NSString *, id> * _Nonnull)offeringAttributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MoEngageStorageConfig;
@class MoEngageUserRegistrationConfig;

/// MoEngage SDK Configuration class
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageSDKConfig")
@interface MoEngageSDKConfig : NSObject
/// Account identifier, APP ID on the MoEngage Dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Set the data-center to which the data should flow.
@property (nonatomic) enum MoEngageDataCenter moeDataCenter;
/// Set the App group id to share the data between app target and extensions
@property (nonatomic, copy) NSString * _Nonnull appGroupID;
/// Interval at which events are flushed to MoEngage backend. Minimum value is 60.
@property (nonatomic) NSInteger analyticsPeriodicFlushDuration;
/// Bool to disable to periodic flush of events.
@property (nonatomic) BOOL analyticsDisablePeriodicFlush;
/// Use formattedAppId to differentiate appId in debug/live build
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedAppId;
/// True if instance is default/primary instance else false
/// :nodoc:
@property (nonatomic, readonly) BOOL isDefaultInstance;
/// True if instance in running in Debug environment else false
/// :nodoc:
@property (nonatomic, readonly) BOOL isTestEnvironment;
/// Configuration for InApp Campaigns.
@property (nonatomic, strong) MoEngageInAppConfig * _Nonnull inAppConfig;
/// Configuration for SDK Storage
@property (nonatomic, strong) MoEngageStorageConfig * _Nonnull storageConfig;
/// Configuration for storing the items in keychain
@property (nonatomic, strong) MoEngageKeyChainConfig * _Nonnull keyChainConfig;
/// Configuration for User Registration
@property (nonatomic, strong) MoEngageUserRegistrationConfig * _Nonnull userRegistrationConfig;
/// Configuration for Network Request.
@property (nonatomic, strong) MoEngageNetworkRequestConfig * _Nonnull networkConfig;
/// Configuration for Console Log
@property (nonatomic, strong) MoEngageConsoleLogConfig * _Nonnull consoleLogConfig;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize instance of MoEngageSDKConfig
/// \param appId Account identifier, APP ID on the MoEngage Dashboard.
///
/// \param dataCenter The dashboard on which you have created your account.
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId dataCenter:(enum MoEngageDataCenter)dataCenter OBJC_DESIGNATED_INITIALIZER;
/// Update the MoEngageSDKConfig properties if it belongs to test environment
/// :nodoc:
- (void)updateConfigForTestEnvironment;
/// Set the partner integration type
/// \param integrationType Enum of type <code>MoEngagePartnerIntegrationType</code>
/// :nodoc:
///
- (void)setPartnerIntegrationTypeWithIntegrationType:(enum MoEngagePartnerIntegrationType)integrationType;
/// Print the description of MoEngageSDKConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MoEngageUserRegistrationStatus;
@class MoEngageUserInformation;

SWIFT_CLASS("_TtC12MoEngageCore15MoEngageSDKCore")
@interface MoEngageSDKCore : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageSDKCore * _Nonnull sharedInstance;)
+ (MoEngageSDKCore * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Register the user
/// \param data JWT token
///
/// \param completionHandler returns the status of registration data
///
- (void)registerUserWithData:(NSString * _Nonnull)data completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// Register the user for Secondary instance
/// \param data JWT token
///
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns the status of registration data
///
- (void)registerUserWithData:(NSString * _Nonnull)data appId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// UnRegister the User
/// note:
/// This API should be called only if user is registered successfully at some point using registerUser
/// \param data JWT token
///
/// \param completionHandler returns the status of Unregistration data
///
- (void)unregisterUserWithData:(NSString * _Nonnull)data completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// UnRegister the User for Secondary instance
/// note:
/// This API should be called only if user is registered successfully at some point using registerUser
/// \param data JWT token
///
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns the status of Unregistration data
///
- (void)unregisterUserWithData:(NSString * _Nonnull)data appId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// Check if User has registered
/// \param completionHandler true if  user is registered else false
///
- (void)getUserRegistrationStatusWithCompletionHandler:(void (^ _Nonnull)(MoEngageUserRegistrationStatus * _Nonnull))completionHandler;
/// Check if User has registered for Secondary instance
/// \param appId MoEngage Account identifier
///
/// \param completionHandler true if  user is registered else false
///
- (void)getUserRegistrationStatusForAppId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageUserRegistrationStatus * _Nonnull))completionHandler;
/// Fetches unique ID generated by the MoEngage SDK.
/// \param completionHandler returns UUID generated by the MoEngage SDK
///
- (void)getMoEngageDeviceIdWithCompletionHandler:(void (^ _Nonnull)(MoEngageUserInformation * _Nonnull))completionHandler;
/// Fetches unique ID generated by the MoEngage SDK for Secondary instance
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns UUID generated by the MoEngage SDK
///
- (void)getMoEngageDeviceIdWithAppId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageUserInformation * _Nonnull))completionHandler;
/// API to enable the common logs  which are not specific to any AppId.
- (void)enableAllLogs;
/// API to disable the common logs  which are not specific to any AppId.
- (void)disableAllLogs;
/// Disable throwing exception to application in debug build to avoid application crashes.
/// note:
/// By default the exception logger will take log status for the given session.
/// Disabling logger is only applicable till process is alive in next process you again need
/// to disable exception logger. So, call this function before SDK Initialisation to avoid exception
/// throwing to application in debug build.
- (void)disableIntegrationValidator;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageSDKInstance")
@interface MoEngageSDKInstance : NSObject
@property (nonatomic, readonly, strong) MoEngageSDKConfig * _Nonnull sdkConfig;
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull sdkQueue;
@property (nonatomic, readonly, strong) MoEngageLogger * _Nonnull logger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore27MoEngageSDKInstanceProvider")
@interface MoEngageSDKInstanceProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageSDKInstanceProvider * _Nonnull sharedInstance;)
+ (MoEngageSDKInstanceProvider * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (MoEngageSDKInstance * _Nullable)getSdkInstanceForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
- (MoEngageSDKInstance * _Nullable)getSdkInstance:(NSString * _Nullable)instanceId SWIFT_WARN_UNUSED_RESULT;
- (MoEngageSDKInstance * _Nullable)getDefaultSdkInstance SWIFT_WARN_UNUSED_RESULT;
@end


/// Enum to set the SDK State
typedef SWIFT_ENUM(NSInteger, MoEngageSDKState, open) {
/// To enable the SDK
  MoEngageSDKStateEnabled = 0,
/// To disable the SDK
  MoEngageSDKStateDisabled = 1,
};


SWIFT_CLASS("_TtC12MoEngageCore22MoEngageSDKStateHelper")
@interface MoEngageSDKStateHelper : NSObject
/// Returns the current state of the SDK, i.e. whether it is enabled or disabled.
/// \param appID MoEngage Account Identifier
///
/// \param completion Returns true if SDK is enabled else false
///
+ (void)isSDKEnabledWithAppID:(NSString * _Nullable)appID completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks if the SDK is initialised with given account identifier
/// \param appID MoEngage Account Identifier
///
/// \param completion Returns true if SDK is initialized else false
///
+ (void)isSDKInitializedWithAppID:(NSString * _Nullable)appID completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks if the SDK is initialised with default account
/// \param completion Returns true if SDK is initialized else false
///
+ (void)isSDKInitialized:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MoEngageStorageEncryptionConfig;

/// Model class to support storage configuration
SWIFT_CLASS("_TtC12MoEngageCore21MoEngageStorageConfig")
@interface MoEngageStorageConfig : NSObject
/// Model responsible to enable storage encryption
@property (nonatomic, readonly, strong) MoEngageStorageEncryptionConfig * _Nonnull encryptionConfig;
/// Returns the instance of type <code>MoEngageStorageConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageStorageConfig</code>
/// :nodoc:
+ (MoEngageStorageConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize  the instance of MoEngageStorageConfig
/// \param encryptionConfig instance of type <code>MoEngageStorageEncryptionConfig</code>
///
- (nonnull instancetype)initWithEncryptionConfig:(MoEngageStorageEncryptionConfig * _Nonnull)encryptionConfig OBJC_DESIGNATED_INITIALIZER;
/// Print the description of <code>MoEngageStorageConfig</code>
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model class to support storage encryption
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageStorageEncryptionConfig")
@interface MoEngageStorageEncryptionConfig : NSObject
/// Set the value as true to enable storage encryption
@property (nonatomic) BOOL isEncryptionEnabled;
/// Initialize the instance of type <code>MoEngageStorageEncryptionConfig</code>
/// \param isEncryptionEnabled Pass true to enable storage encryption
///
- (nonnull instancetype)initWithIsEncryptionEnabled:(BOOL)isEncryptionEnabled OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of MoEngageStorageEncryptionConfig with default configuration
///
/// returns:
/// Instance of MoEngageStorageEncryptionConfig  where encryption is disabled
+ (MoEngageStorageEncryptionConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Prints the description of MoEngageStorageEncryptionConfig
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class to provide MoEngageStandardUserDefaults instance
/// note:
/// This class is used for internal purpose.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageStorageProvider")
@interface MoEngageStorageProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageStorageProvider * _Nonnull sharedInstance;)
+ (MoEngageStorageProvider * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Enum to set the user gender
typedef SWIFT_ENUM(NSInteger, MoEngageUserGender, open) {
/// User gender male
  MoEngageUserGenderMale = 0,
/// User gender female
  MoEngageUserGenderFemale = 1,
/// User gender others
  MoEngageUserGenderOthers = 2,
};


/// Model that returns User related information
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageUserInformation")
@interface MoEngageUserInformation : NSObject
/// User account related information
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// Unique id of the user.
@property (nonatomic, readonly, copy) NSString * _Nullable uniqueId;
- (nonnull instancetype)initWithAccountMeta:(MoEngageAccountMeta * _Nonnull)accountMeta uniqueId:(NSString * _Nullable)uniqueId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Registration Flow Configuration
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageUserRegistrationConfig")
@interface MoEngageUserRegistrationConfig : NSObject
/// Pass true to enable the user registration flow.
@property (nonatomic) BOOL isUserRegistrationEnabled;
/// Returns the instance of type <code>MoEngageUserRegistrationConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageUserRegistrationConfig</code>
/// :nodoc:
+ (MoEngageUserRegistrationConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of <code>MoEngageUserRegistrationConfig</code>
/// \param isUserRegistrationEnabled Pass true to enable the user registration flow else false.
///
- (nonnull instancetype)initWithIsUserRegistrationEnabled:(BOOL)isUserRegistrationEnabled OBJC_DESIGNATED_INITIALIZER;
/// Prints the description of MoEngageUserRegistrationConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model responsible for User registration status
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageUserRegistrationStatus")
@interface MoEngageUserRegistrationStatus : NSObject
/// User account related information
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// true if user is registered else false.
@property (nonatomic) BOOL isUserRegistered;
- (nonnull instancetype)initWithAccountMeta:(MoEngageAccountMeta * _Nonnull)accountMeta isUserRegistered:(BOOL)isUserRegistered OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end










/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17ValidateExtension")
@interface ValidateExtension : NSObject
+ (BOOL)isFromExtension SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
